{"code":"var RevasCanvas = /** @class */ (function () {\r\n    function RevasCanvas(context) {\r\n        this.transform = new Transform(context);\r\n    }\r\n    Object.defineProperty(RevasCanvas.prototype, \"context\", {\r\n        get: function () {\r\n            return this.transform.context;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RevasCanvas.prototype, \"element\", {\r\n        get: function () {\r\n            return this.context.canvas;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return RevasCanvas;\r\n}());\r\nexport { RevasCanvas };\r\nvar Transform = /** @class */ (function () {\r\n    function Transform(context) {\r\n        this.context = context;\r\n        this._stack = [];\r\n        this._canGetTransform = false;\r\n        this._canGetTransform = Boolean(context.getTransform);\r\n    }\r\n    Transform.prototype.save = function () {\r\n        if (this._canGetTransform) {\r\n            this._stack.push(this.context.getTransform());\r\n        }\r\n        else {\r\n            this.context.save();\r\n        }\r\n    };\r\n    Transform.prototype.restore = function () {\r\n        if (this._canGetTransform) {\r\n            if (this._stack.length > 0) {\r\n                this.context.setTransform(this._stack.pop());\r\n            }\r\n        }\r\n        else {\r\n            this.context.restore();\r\n        }\r\n    };\r\n    Transform.prototype.translate = function (x, y) {\r\n        this.context.translate(x, y);\r\n    };\r\n    Transform.prototype.rotate = function (rad) {\r\n        this.context.rotate(rad);\r\n    };\r\n    Transform.prototype.scale = function (sx, sy) {\r\n        this.context.scale(sx, sy);\r\n    };\r\n    return Transform;\r\n}());\r\nexport { Transform };\r\n","references":[],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/core/Canvas.d.ts","writeByteOrderMark":false,"text":"export declare class RevasCanvas {\r\n    readonly transform: Transform;\r\n    constructor(context: CanvasRenderingContext2D);\r\n    get context(): CanvasRenderingContext2D;\r\n    get element(): HTMLCanvasElement;\r\n}\r\nexport declare class Transform {\r\n    readonly context: CanvasRenderingContext2D;\r\n    _stack: DOMMatrix[];\r\n    _canGetTransform: boolean;\r\n    constructor(context: CanvasRenderingContext2D);\r\n    save(): void;\r\n    restore(): void;\r\n    translate(x: number, y: number): void;\r\n    rotate(rad: number): void;\r\n    scale(sx: number, sy: number): void;\r\n}\r\n"}}
