{"code":"import { __assign, __extends } from \"tslib\";\r\nimport * as React from 'react';\r\nimport ScrollView from './ScrollView';\r\nvar ListView = /** @class */ (function (_super) {\r\n    __extends(ListView, _super);\r\n    function ListView() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            start: 0,\r\n            end: 1,\r\n        };\r\n        _this._height = 0;\r\n        _this.checkVisible = function (y) {\r\n            if (_this._height > 0) {\r\n                var itemHeight = _this.props.itemHeight;\r\n                var _a = _this.state, _start = _a.start, _end = _a.end;\r\n                var start = Math.max(0, Math.floor((y - 10) / itemHeight));\r\n                var end = Math.floor((y + _this._height + 10) / itemHeight);\r\n                if (start !== _start || end !== _end) {\r\n                    _this.setState({ start: start, end: end });\r\n                }\r\n            }\r\n        };\r\n        _this._onScroll = function (e) {\r\n            _this.checkVisible(e.y);\r\n            _this.props.onScroll && _this.props.onScroll(e);\r\n        };\r\n        _this._onLayout = function (frame) {\r\n            if (_this._height !== frame.height) {\r\n                _this._height = frame.height;\r\n            }\r\n            // this._width = frame.width\r\n        };\r\n        _this.renderItem = function (item, i) {\r\n            var _a = _this.props, data = _a.data, renderItem = _a.renderItem;\r\n            var index = i + _this.state.start;\r\n            return React.createElement(React.Fragment, { key: index }, renderItem(item, index, data));\r\n        };\r\n        return _this;\r\n    }\r\n    ListView.prototype.componentDidMount = function () {\r\n        this.checkVisible(0);\r\n    };\r\n    ListView.prototype.render = function () {\r\n        var _a = this.props, data = _a.data, itemHeight = _a.itemHeight;\r\n        var _b = this.state, start = _b.start, end = _b.end;\r\n        // console.log(start, end, this._height);\r\n        return React.createElement(ScrollView, __assign(__assign({}, this.props), { onScroll: this._onScroll, onLayout: this._onLayout, offset: { y: start * itemHeight } }), data.slice(start, end + 1).map(this.renderItem));\r\n    };\r\n    return ListView;\r\n}(React.Component));\r\nexport default ListView;\r\n","references":["/Users/fimplus/Desktop/revasReal/node_modules/@types/react/index.d.ts","/Users/fimplus/Desktop/revasReal/src/revas/components/common/Scroller.ts","/Users/fimplus/Desktop/revasReal/src/revas/components/ScrollView.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/components/ListView.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport ScrollView, { ScrollViewProps } from './ScrollView';\r\nexport declare type ListViewProps<T = any> = {\r\n    data: T[];\r\n    renderItem: (item: T, index: number, data: T[]) => React.ReactNode;\r\n    itemHeight: number;\r\n} & ScrollViewProps;\r\nexport default class ListView extends React.Component<ListViewProps<any>> {\r\n    state: {\r\n        start: number;\r\n        end: number;\r\n    };\r\n    private _height;\r\n    componentDidMount(): void;\r\n    private checkVisible;\r\n    private _onScroll;\r\n    private _onLayout;\r\n    renderItem: (item: any, i: number) => React.FunctionComponentElement<{\r\n        key: number;\r\n    }>;\r\n    render(): React.CElement<ScrollViewProps, ScrollView>;\r\n}\r\n"}}
