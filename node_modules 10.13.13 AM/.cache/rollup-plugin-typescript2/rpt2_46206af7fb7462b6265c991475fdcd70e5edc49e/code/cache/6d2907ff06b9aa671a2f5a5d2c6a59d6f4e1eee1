{"code":"import { createElement } from \"react\";\r\nimport renderer from \"../core/reconciler\";\r\nimport { noop } from \"../core/utils\";\r\nimport { Container } from \"../core/Container\";\r\nimport { RevasCanvas } from \"../core/Canvas\";\r\nimport { clearCache } from \"../core/offscreen\";\r\nimport { Root } from \"../components/Context\";\r\nfunction getNodePosition(node) {\r\n    var top = 0;\r\n    var left = 0;\r\n    while (node) {\r\n        top += node.offsetTop;\r\n        left += node.offsetLeft;\r\n        node = node.offsetParent;\r\n    }\r\n    return [top, left];\r\n}\r\nfunction createRevasTouchEvent(e) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    var touches = {};\r\n    var type = e.type === \"touchcancel\" ? \"touchend\" : e.type;\r\n    Object.keys(e.changedTouches).forEach(function (key) {\r\n        var touch = e.changedTouches[key];\r\n        if (touch && touch.target) {\r\n            var _a = getNodePosition(touch.target), offsetTop = _a[0], offsetLeft = _a[1];\r\n            touches[touch.identifier] = {\r\n                identifier: touch.identifier,\r\n                x: touch.clientX - offsetLeft,\r\n                y: touch.clientY - offsetTop,\r\n            };\r\n        }\r\n    });\r\n    return { type: type, touches: touches, timestamp: e.timeStamp || Date.now() };\r\n}\r\nfunction createCanvas(parent, scale) {\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.setAttribute(\"style\", \"width: 100%; height: 100%;\");\r\n    parent.appendChild(canvas);\r\n    canvas.width = canvas.clientWidth * scale;\r\n    canvas.height = canvas.clientHeight * scale;\r\n    return canvas;\r\n}\r\nfunction createRoot(app, dom, canvas) {\r\n    return createElement(Root, {\r\n        clientWidth: dom.clientWidth,\r\n        clientHeight: dom.clientHeight,\r\n        deviceRatio: window.devicePixelRatio,\r\n        canvas: canvas,\r\n    }, app);\r\n}\r\nfunction initTouch(dom, handler) {\r\n    dom.addEventListener(\"touchstart\", handler, false);\r\n    dom.addEventListener(\"touchmove\", handler, false);\r\n    dom.addEventListener(\"touchend\", handler, false);\r\n    dom.addEventListener(\"touchcancel\", handler, false);\r\n    dom.addEventListener(\"keypress\", handler, false);\r\n    dom.addEventListener(\"keyup\", handler, false);\r\n    dom.addEventListener(\"keydown\", handler, false);\r\n    return function () {\r\n        dom.removeEventListener(\"touchstart\", handler, false);\r\n        dom.removeEventListener(\"touchmove\", handler, false);\r\n        dom.removeEventListener(\"touchend\", handler, false);\r\n        dom.removeEventListener(\"touchcancel\", handler, false);\r\n        dom.removeEventListener(\"keypress\", handler, false);\r\n        dom.removeEventListener(\"keyup\", handler, false);\r\n        dom.removeEventListener(\"keydown\", handler, false);\r\n    };\r\n}\r\nexport function render(app, parent, parentComponent, callback) {\r\n    if (callback === void 0) { callback = noop; }\r\n    var scale = window.devicePixelRatio;\r\n    var dom = createCanvas(parent, scale);\r\n    var canvas = new RevasCanvas(dom.getContext(\"2d\"));\r\n    var container = new Container();\r\n    var destroyTouch = initTouch(dom, function (e) { return container.handleTouch(createRevasTouchEvent(e)); });\r\n    var fiber = renderer.createContainer(container, false, false);\r\n    canvas.transform.scale(scale, scale);\r\n    renderer.updateContainer(createRoot(app, dom, canvas), fiber, parentComponent, callback);\r\n    return {\r\n        get $() {\r\n            return dom;\r\n        },\r\n        update: function (next, callback) {\r\n            if (next === void 0) { next = app; }\r\n            if (callback === void 0) { callback = noop; }\r\n            dom.width = dom.clientWidth * scale;\r\n            dom.height = dom.clientHeight * scale;\r\n            clearCache();\r\n            canvas.transform.scale(scale, scale);\r\n            renderer.updateContainer(createRoot(next, dom, canvas), fiber, parentComponent, callback);\r\n        },\r\n        unmount: function (callback) {\r\n            if (callback === void 0) { callback = noop; }\r\n            renderer.updateContainer(null, fiber, null, callback);\r\n            destroyTouch();\r\n            clearCache();\r\n            dom.remove();\r\n        },\r\n    };\r\n}\r\n","references":["/Users/fimplus/Desktop/revasReal/node_modules/@types/react/index.d.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/reconciler.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Container.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Canvas.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/offscreen.ts","/Users/fimplus/Desktop/revasReal/src/revas/components/Context.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/web/render.d.ts","writeByteOrderMark":false,"text":"import { Component } from \"react\";\r\nimport { noop } from \"../core/utils\";\r\nexport declare function render(app: React.ReactNode, parent: HTMLElement, parentComponent?: Component<any>, callback?: typeof noop): {\r\n    readonly $: HTMLCanvasElement;\r\n    update(next?: import(\"react\").ReactNode, callback?: typeof noop): void;\r\n    unmount(callback?: typeof noop): void;\r\n};\r\n"}}
