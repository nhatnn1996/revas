{"code":"import { adapter } from './utils';\r\nvar MAX_SIZE = 30;\r\nvar cache = new Map();\r\nvar ids = [];\r\nexport function getCache(id) {\r\n    return cache.get(id);\r\n}\r\nexport function createCache(style, w, h, id) {\r\n    if (ids.length >= MAX_SIZE) {\r\n        var expiredId = ids.shift();\r\n        var canvas = cache.get(expiredId).canvas;\r\n        var cached = {\r\n            canvas: adapter.resetOffscreenCanvas(canvas, w, h),\r\n            id: id,\r\n            style: style,\r\n        };\r\n        cache.delete(expiredId);\r\n        cache.set(cached.id, cached);\r\n        ids.push(cached.id);\r\n        return cached;\r\n    }\r\n    else {\r\n        var cached = {\r\n            canvas: adapter.createOffscreenCanvas(w, h),\r\n            id: id,\r\n            style: style,\r\n        };\r\n        cache.set(cached.id, cached);\r\n        ids.push(cached.id);\r\n        return cached;\r\n    }\r\n}\r\nvar idCache = new WeakMap();\r\nvar __ID = 0;\r\nexport function autoCacheId(node) {\r\n    if (idCache.has(node)) {\r\n        return idCache.get(node);\r\n    }\r\n    else {\r\n        var id = \"$$auto_id-\" + __ID++;\r\n        idCache.set(node, id);\r\n        return id;\r\n    }\r\n}\r\nexport function clearCache() {\r\n    cache.clear();\r\n    ids.length = 0;\r\n}\r\n","references":["/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Canvas.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/core/offscreen.d.ts","writeByteOrderMark":false,"text":"import { Node } from './Node';\r\nimport { RevasCanvas } from './Canvas';\r\nexport interface CachedCanvas {\r\n    id: string;\r\n    canvas: RevasCanvas;\r\n    style: any;\r\n}\r\nexport declare function getCache(id: string): CachedCanvas | undefined;\r\nexport declare function createCache(style: any, w: number, h: number, id: string): CachedCanvas;\r\nexport declare function autoCacheId(node: Node): string | undefined;\r\nexport declare function clearCache(): void;\r\n"}}
