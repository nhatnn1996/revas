{"code":"import { getFrameFromNode, getMergedStyleFromNode, sortByZIndexAscending } from \"./utils\";\r\nfunction scaled(x, c, s) {\r\n    if (s === void 0) { s = 1; }\r\n    if (!s && s === 1)\r\n        return x;\r\n    return ((s - 1) * c + x) / s;\r\n}\r\nfunction findNodeByPoint(node, x, y) {\r\n    if (node.props.pointerEvents === 'none')\r\n        return;\r\n    var children = node.children.slice().sort(sortByZIndexAscending).reverse();\r\n    var style = getMergedStyleFromNode(node);\r\n    var frame = getFrameFromNode(node);\r\n    // tranlate\r\n    var scaleX = style.scaleX || style.scale;\r\n    var scaleY = style.scaleY || style.scale;\r\n    var originX = frame.width / 2 + frame.x;\r\n    var originY = frame.height / 2 + frame.y;\r\n    x -= style.translateX || 0;\r\n    y -= style.translateY || 0;\r\n    x = scaled(x, originX, scaleX);\r\n    y = scaled(y, originY, scaleY);\r\n    if (frame.x < x && frame.y < y\r\n        && x <= frame.x + frame.width\r\n        && y <= frame.y + frame.height) {\r\n        for (var i = 0; i < children.length; i++) {\r\n            var target = findNodeByPoint(children[i], x, y);\r\n            if (target)\r\n                return target;\r\n        }\r\n        if (node.props.pointerEvents === 'box-none')\r\n            return;\r\n        return node;\r\n    }\r\n}\r\nvar eventNodeHolder = {};\r\nexport function getNodeByTouch(root, type, touch) {\r\n    if (type === 'touchstart') {\r\n        var target = findNodeByPoint(root, touch.x, touch.y);\r\n        eventNodeHolder[touch.identifier] = target || root;\r\n        return eventNodeHolder[touch.identifier];\r\n    }\r\n    else if (type === 'touchmove') {\r\n        return eventNodeHolder[touch.identifier] || root;\r\n    }\r\n    else if (type === 'touchend') {\r\n        var target = eventNodeHolder[touch.identifier];\r\n        delete eventNodeHolder[touch.identifier];\r\n        return target || root;\r\n    }\r\n    return root;\r\n}\r\nvar LISTENER_MAP = {\r\n    touchstart: 'onTouchStart',\r\n    touchmove: 'onTouchMove',\r\n    touchend: 'onTouchEnd'\r\n};\r\nexport function emitTouch(node, e) {\r\n    var funcName = LISTENER_MAP[e.type];\r\n    if (funcName) {\r\n        while (node) {\r\n            if (node.props[funcName]\r\n                && node.props.pointerEvents !== 'box-none'\r\n                && node.props[funcName](e) === false)\r\n                return;\r\n            node = node.parent;\r\n        }\r\n    }\r\n}\r\n","references":["/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/core/touch.d.ts","writeByteOrderMark":false,"text":"import { Node, RevasTouchEvent, RevasTouchType, RevasTouch } from \"./Node\";\r\nexport declare function getNodeByTouch(root: Node, type: RevasTouchType, touch: RevasTouch): Node<any>;\r\nexport declare function emitTouch(node: Node | void, e: RevasTouchEvent): void;\r\n"}}
