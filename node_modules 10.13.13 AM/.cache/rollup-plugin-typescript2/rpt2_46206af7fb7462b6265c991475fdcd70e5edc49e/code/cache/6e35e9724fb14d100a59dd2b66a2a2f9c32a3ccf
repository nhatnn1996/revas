{"code":"// import { updateLayout } from './css-layout'\r\nimport { updateLayout } from \"./yoga-layout\";\r\nimport { promise } from \"./yoga-layout/init\";\r\nimport { drawNode } from \"./draw\";\r\nimport { getNodeByTouch, emitTouch } from \"./touch\";\r\nvar Container = /** @class */ (function () {\r\n    function Container() {\r\n        var _this = this;\r\n        this._ready = false;\r\n        this._next = false;\r\n        this._reflow = false;\r\n        this.handleTouch = function (evt) {\r\n            var _root = _this._root;\r\n            if (_root) {\r\n                var emitted_1 = new WeakSet();\r\n                Object.values(evt.touches).forEach(function (touch) {\r\n                    var node = getNodeByTouch(_root, evt.type, touch);\r\n                    // check if node is unmounted\r\n                    if (node.parent && !emitted_1.has(node)) {\r\n                        emitted_1.add(node);\r\n                        emitTouch(node, evt);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.draw = function (reflow) {\r\n            if (reflow === void 0) { reflow = false; }\r\n            _this._reflow = _this._reflow || reflow;\r\n            if (!_this._ready) {\r\n                _this._next = true;\r\n                return;\r\n            }\r\n            _this._ready = false;\r\n            var _a = _this, _root = _a._root, canvas = _a.canvas;\r\n            if (canvas) {\r\n                // if not unmounted\r\n                if (_this._reflow) {\r\n                    updateLayout(_root)();\r\n                    _this._reflow = false;\r\n                }\r\n                canvas.context.clearRect(0, 0, _this.width, _this.height);\r\n                drawNode(canvas, _root, _this);\r\n                requestAnimationFrame(_this.ready);\r\n            }\r\n        };\r\n        this.ready = function () {\r\n            _this._ready = true;\r\n            if (_this._next) {\r\n                _this._next = false;\r\n                _this.draw();\r\n            }\r\n        };\r\n        promise.then(this.ready);\r\n    }\r\n    Object.defineProperty(Container.prototype, \"canvas\", {\r\n        get: function () {\r\n            var _a;\r\n            return (_a = this._root) === null || _a === void 0 ? void 0 : _a.props.canvas;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"width\", {\r\n        get: function () {\r\n            var _a;\r\n            return ((_a = this._root) === null || _a === void 0 ? void 0 : _a.props.clientWidth) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"height\", {\r\n        get: function () {\r\n            var _a;\r\n            return ((_a = this._root) === null || _a === void 0 ? void 0 : _a.props.clientHeight) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"scale\", {\r\n        get: function () {\r\n            var _a;\r\n            return ((_a = this._root) === null || _a === void 0 ? void 0 : _a.props.deviceRatio) || 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Container.prototype.setRoot = function (root) {\r\n        this._root = root;\r\n    };\r\n    return Container;\r\n}());\r\nexport { Container };\r\n","references":["/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/yoga-layout/index.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/yoga-layout/init.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/draw.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/touch.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Canvas.ts","/Users/fimplus/Desktop/revasReal/src/revas/components/Context.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/core/Container.d.ts","writeByteOrderMark":false,"text":"import { Node, RevasTouchEvent } from \"./Node\";\r\nimport { RevasCanvas } from \"./Canvas\";\r\nimport { AppContextType } from \"../components/Context\";\r\nexport declare class Container {\r\n    private _ready;\r\n    private _next;\r\n    private _reflow;\r\n    private _root?;\r\n    get canvas(): RevasCanvas | void;\r\n    get width(): number;\r\n    get height(): number;\r\n    get scale(): number;\r\n    constructor();\r\n    setRoot(root?: Node<AppContextType>): void;\r\n    handleTouch: (evt: RevasTouchEvent) => void;\r\n    draw: (reflow?: boolean) => void;\r\n    private ready;\r\n}\r\n"}}
