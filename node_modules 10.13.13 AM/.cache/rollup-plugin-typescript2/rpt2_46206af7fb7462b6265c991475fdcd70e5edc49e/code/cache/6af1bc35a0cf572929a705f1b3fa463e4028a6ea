{"code":"import ReactReconciler from 'react-reconciler';\r\nimport { Node } from './Node';\r\nimport { noop, now } from './utils';\r\nfunction checkAndRemove(parent, child) {\r\n    var index = parent.children.indexOf(child);\r\n    if (index >= 0) {\r\n        parent.children.splice(index, 1);\r\n    }\r\n}\r\nfunction appendChild(parent, child) {\r\n    checkAndRemove(parent, child);\r\n    parent.children.push(child);\r\n    child.parent = parent;\r\n}\r\nexport default ReactReconciler({\r\n    supportsHydration: false,\r\n    supportsPersistence: false,\r\n    supportsMutation: true,\r\n    isPrimaryRenderer: false,\r\n    createInstance: function (type, props) {\r\n        return new Node(type, props);\r\n    },\r\n    createTextInstance: function () {\r\n        throw new Error('Revas: string cannot be child out of <Text/>');\r\n    },\r\n    appendChild: appendChild,\r\n    appendInitialChild: appendChild,\r\n    appendChildToContainer: function (container, instance) {\r\n        if (instance.type !== 'Root') {\r\n            throw new Error(\"wrong root instance type: \" + instance.type);\r\n        }\r\n        container.setRoot(instance);\r\n    },\r\n    removeChild: function (parent, child) {\r\n        checkAndRemove(parent, child);\r\n        child.parent = void 0;\r\n    },\r\n    removeChildFromContainer: function (container) {\r\n        container.setRoot();\r\n    },\r\n    insertBefore: function (parent, child, before) {\r\n        checkAndRemove(parent, child);\r\n        var beforeIndex = parent.children.indexOf(before);\r\n        parent.children.splice(beforeIndex, 0, child);\r\n        child.parent = parent;\r\n    },\r\n    insertInContainerBefore: function () {\r\n        throw new Error(\"shouldn't be here: insertInContainerBefore\");\r\n    },\r\n    finalizeInitialChildren: function () {\r\n        return false;\r\n    },\r\n    getPublicInstance: function (instance) {\r\n        return instance;\r\n    },\r\n    prepareUpdate: function () {\r\n        return true;\r\n    },\r\n    commitUpdate: function (instance, updatePayload, type, oldProps, newProps) {\r\n        instance.props = newProps;\r\n    },\r\n    prepareForCommit: noop,\r\n    resetAfterCommit: function (container) {\r\n        container.draw(true);\r\n    },\r\n    resetTextContent: noop,\r\n    getRootHostContext: function () {\r\n        return {};\r\n    },\r\n    getChildHostContext: function (parentHostContext) {\r\n        return parentHostContext;\r\n    },\r\n    shouldSetTextContent: function () {\r\n        return false;\r\n    },\r\n    shouldDeprioritizeSubtree: function () { return false; },\r\n    scheduleDeferredCallback: noop,\r\n    cancelDeferredCallback: noop,\r\n    setTimeout: setTimeout,\r\n    clearTimeout: clearTimeout,\r\n    noTimeout: -1,\r\n    now: now,\r\n});\r\n","references":["/Users/fimplus/Desktop/revasReal/node_modules/@types/react-reconciler/index.d.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Container.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/core/reconciler.d.ts","writeByteOrderMark":false,"text":"import ReactReconciler from 'react-reconciler';\r\nimport { Node } from './Node';\r\nimport { Container } from './Container';\r\ndeclare const _default: ReactReconciler.Reconciler<Node<any>, Node<any>, Container, Node<any>>;\r\nexport default _default;\r\n"}}
