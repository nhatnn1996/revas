{"code":"import { __assign } from \"tslib\";\r\nimport { clamp, noop } from \"../../core/utils\";\r\nvar Scroller = /** @class */ (function () {\r\n    function Scroller(listener) {\r\n        var _this = this;\r\n        this.listener = listener;\r\n        this._timestamp = 0;\r\n        this._x = new Handler();\r\n        this._y = new Handler();\r\n        this._tid = \"\";\r\n        this._offset = 0;\r\n        this.horizontal = false;\r\n        this.scrollAnimate = function () {\r\n            var condition = 16 * 420 - 160;\r\n            if (_this._x.offset > condition) {\r\n                _this._x.setOffset(0);\r\n            }\r\n            _this._x.onMove(30, 1000);\r\n            _this.emit(\"start\");\r\n            _this._timer = requestAnimationFrame(_this.scrollAnimate);\r\n        };\r\n        this.touchStart = function (e) {\r\n            _this._timer = requestAnimationFrame(_this.scrollAnimate);\r\n        };\r\n        this.touchMove = function (e) {\r\n            if (_this._tid && e.touches[_this._tid] && _this._check(e)) {\r\n                var _a = e.touches[_this._tid], x = _a.x, y = _a.y;\r\n                var duration = e.timestamp - _this._timestamp;\r\n                _this._timestamp = e.timestamp;\r\n                _this.horizontal ? _this._x.onMove(x, duration) : _this._y.onMove(y, duration);\r\n                _this.emit(\"scroll\");\r\n                _this._sign(e);\r\n            }\r\n        };\r\n        this.touchEnd = function () {\r\n            if (_this._tid) {\r\n                _this._tid = \"\";\r\n                _this._timestamp = Date.now();\r\n                _this._x.onEnd();\r\n                _this._y.onEnd();\r\n                _this._timer = requestAnimationFrame(_this.afterEnd);\r\n            }\r\n        };\r\n        this.afterEnd = function () {\r\n            var timestamp = Date.now();\r\n            var duration = timestamp - _this._timestamp;\r\n            _this._timestamp = timestamp;\r\n            if (_this.horizontal ? _this._x.afterEnd(duration) : _this._y.afterEnd(duration)) {\r\n                _this.emit(\"scroll\");\r\n                _this._timer = requestAnimationFrame(_this.afterEnd);\r\n            }\r\n            else {\r\n                _this.emit(\"end\");\r\n            }\r\n        };\r\n    }\r\n    Object.defineProperty(Scroller.prototype, \"maxX\", {\r\n        get: function () {\r\n            return this._x.max;\r\n        },\r\n        set: function (value) {\r\n            this._x.max = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scroller.prototype, \"maxY\", {\r\n        get: function () {\r\n            return this._y.max;\r\n        },\r\n        set: function (value) {\r\n            this._y.max = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scroller.prototype, \"pagingX\", {\r\n        set: function (value) {\r\n            this._x.paging = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scroller.prototype, \"pagingY\", {\r\n        set: function (value) {\r\n            this._y.paging = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Scroller.prototype._sign = function (e) {\r\n        var _this = this;\r\n        e.scroll = __assign(__assign({}, e.scroll), { x: true, y: true });\r\n        var stopPropagation = e.scroll.stopPropagation || noop;\r\n        if (this.horizontal) {\r\n            if (this._x.velocity > 0) {\r\n                e.scroll.y = false;\r\n                stopPropagation();\r\n            }\r\n            if (this._x.offset > 0 && this._x.offset < this._x.max) {\r\n                e.scroll.x = false;\r\n            }\r\n        }\r\n        else {\r\n            if (this._y.velocity > 0) {\r\n                e.scroll.x = false;\r\n                stopPropagation();\r\n            }\r\n            if (this._y.offset > 0 && this._y.offset < this._y.max) {\r\n                e.scroll.y = false;\r\n            }\r\n        }\r\n        e.stopPropagation = function () {\r\n            _this.touchEnd();\r\n            stopPropagation();\r\n        };\r\n    };\r\n    Scroller.prototype._check = function (e) {\r\n        if (this.horizontal && e.scroll && e.scroll.x === false) {\r\n            return this.touchEnd();\r\n        }\r\n        if (!this.horizontal && e.scroll && e.scroll.y === false) {\r\n            return this.touchEnd();\r\n        }\r\n        return true;\r\n    };\r\n    Scroller.prototype.emit = function (type) {\r\n        this.listener({\r\n            type: type,\r\n            x: this._x.offset,\r\n            vx: this._x.velocity,\r\n            y: this._y.offset,\r\n            vy: this._y.velocity,\r\n            timestamp: this._timestamp,\r\n            tid: this._tid,\r\n        });\r\n    };\r\n    Scroller.prototype.cancel = function () {\r\n        cancelAnimationFrame(this._timer);\r\n        this._tid = \"\";\r\n        this._timestamp = Date.now();\r\n        this._x.onEnd();\r\n        this._y.onEnd();\r\n    };\r\n    return Scroller;\r\n}());\r\nexport default Scroller;\r\nvar Handler = /** @class */ (function () {\r\n    function Handler() {\r\n        this.offset = 0;\r\n        this.velocity = 20;\r\n        this.max = -1;\r\n        this.paging = 0;\r\n        this._last = -1;\r\n    }\r\n    //\r\n    Handler.prototype.capture = function (value) {\r\n        if (this._last < 0) {\r\n            this._last = value;\r\n        }\r\n    };\r\n    Handler.prototype.onMove = function (value, duration) {\r\n        if (duration > 0) {\r\n            var move = value;\r\n            this.velocity = move / duration; // quảng đường / thời gian = vận tốc\r\n            this.change(move);\r\n        }\r\n    };\r\n    Handler.prototype.onEnd = function () {\r\n        if (this._last >= 0) {\r\n            this._last = -1;\r\n        }\r\n    };\r\n    Handler.prototype.setOffset = function (value) {\r\n        this.offset = value;\r\n    };\r\n    Handler.prototype.afterEnd = function (duration) {\r\n        if (this._last < 0) {\r\n            var absv = Math.abs(this.velocity);\r\n            if (this.paging > 0 && absv <= 0.5 && this.offset < this.max) {\r\n                // start reset to paging\r\n                var distance = Math.round(this.offset / this.paging + this.velocity) * this.paging - this.offset;\r\n                this.velocity = clamp(distance / 2000 + friction(this.velocity, duration, 0.01), -0.5, 0.5);\r\n                if (Math.abs(distance) > 0.5 || absv > 0.05) {\r\n                    var move = this.velocity * duration;\r\n                    this.change(move);\r\n                    return true;\r\n                }\r\n                else {\r\n                    // end to paging\r\n                    this.change(distance);\r\n                }\r\n            }\r\n            else if (absv > 0.05) {\r\n                // scroll for free\r\n                this.velocity = friction(this.velocity, duration, 0.002);\r\n                var move = this.velocity * duration;\r\n                this.change(move);\r\n                return true;\r\n            }\r\n            else {\r\n                this.velocity = 0;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Handler.prototype.change = function (move) {\r\n        var _offset = clamp(this.offset + move, 0, this.max > 0 ? this.max : 0);\r\n        if (_offset !== this.offset) {\r\n            this.offset = _offset;\r\n        }\r\n        else {\r\n            this.velocity = 0;\r\n        }\r\n    };\r\n    return Handler;\r\n}());\r\nfunction friction(v, duration, factor) {\r\n    return v - Math.min(duration * factor, 1) * v;\r\n}\r\n","references":["/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/components/common/Scroller.d.ts","writeByteOrderMark":false,"text":"import { RevasTouchEvent } from \"../../core/Node\";\r\nexport declare type RevasScrollEventType = \"start\" | \"scroll\" | \"end\" | \"none\";\r\nexport interface RevasScrollEvent {\r\n    type: RevasScrollEventType;\r\n    x: number;\r\n    y: number;\r\n    vx: number;\r\n    vy: number;\r\n    timestamp: number;\r\n    tid: string;\r\n}\r\nexport default class Scroller {\r\n    private listener;\r\n    private _timestamp;\r\n    private _x;\r\n    private _y;\r\n    private _tid;\r\n    private _timer;\r\n    private _offset;\r\n    horizontal?: boolean;\r\n    constructor(listener: (e: any) => any);\r\n    set maxX(value: number);\r\n    get maxX(): number;\r\n    set maxY(value: number);\r\n    get maxY(): number;\r\n    set pagingX(value: number);\r\n    set pagingY(value: number);\r\n    private _sign;\r\n    private _check;\r\n    scrollAnimate: () => void;\r\n    touchStart: (e: any) => void;\r\n    touchMove: (e: RevasTouchEvent) => void;\r\n    touchEnd: () => void;\r\n    afterEnd: () => void;\r\n    emit(type: RevasScrollEventType): void;\r\n    cancel(): void;\r\n}\r\n"}}
