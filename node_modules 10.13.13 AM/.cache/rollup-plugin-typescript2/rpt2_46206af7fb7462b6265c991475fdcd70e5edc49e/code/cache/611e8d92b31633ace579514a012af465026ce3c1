{"code":"import { getChars, getWords, setShadow } from '../../core/utils';\r\nexport var DEFAULT_MEASURE = [[], 0];\r\nfunction measureLines(canvas, chars, boxWidth, numberOfLines) {\r\n    var lines = [];\r\n    var width = 0;\r\n    var text = '';\r\n    var cursor = -1;\r\n    function pushLine(charWidth, char, force) {\r\n        if (charWidth === void 0) { charWidth = 0; }\r\n        if (char === void 0) { char = ''; }\r\n        if (force === void 0) { force = false; }\r\n        if (force || text) {\r\n            lines.push({ width: width, text: text });\r\n        }\r\n        if (cursor < chars.length && numberOfLines > 0 && lines.length >= numberOfLines) {\r\n            var lastLine = lines[lines.length - 1];\r\n            lastLine.text = lastLine.text.slice(0, -2) + \"...\";\r\n            lastLine.width = canvas.context.measureText(lastLine.text).width;\r\n            cursor = chars.length + 1;\r\n        }\r\n        else {\r\n            width = charWidth;\r\n            text = char.trim();\r\n        }\r\n    }\r\n    while (cursor++ <= chars.length) {\r\n        if (chars.length > cursor) {\r\n            var char = chars[cursor];\r\n            if (char === '\\n') {\r\n                pushLine(0, '', true);\r\n            }\r\n            else {\r\n                var charWidth = canvas.context.measureText(char).width;\r\n                if (charWidth + width > boxWidth) {\r\n                    pushLine(charWidth, char);\r\n                }\r\n                else {\r\n                    width += charWidth;\r\n                    text += char;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            pushLine();\r\n        }\r\n    }\r\n    return lines;\r\n}\r\nfunction splitContent(content, wordBreak) {\r\n    switch (wordBreak) {\r\n        case 'break-all':\r\n            return getChars(content);\r\n        case 'keep-all':\r\n            return [content];\r\n        default:\r\n            return getWords(content);\r\n    }\r\n}\r\nexport function applyTextStyle(canvas, options) {\r\n    var _a = options.textStyle, fontStyle = _a.fontStyle, fontWeight = _a.fontWeight, fontSize = _a.fontSize, fontFamily = _a.fontFamily, textBaseline = _a.textBaseline, color = _a.color;\r\n    // Apply Styles\r\n    canvas.context.font = fontStyle + \" \" + fontWeight + \" \" + fontSize + \"px \" + fontFamily;\r\n    canvas.context.fillStyle = color;\r\n    canvas.context.textBaseline = textBaseline;\r\n}\r\nexport function measureText(canvas, options) {\r\n    var lines = measureLines(canvas, splitContent(options.content, options.textStyle.wordBreak), options.frame.width, options.numberOfLines);\r\n    return [lines, options.textStyle.lineHeight * lines.length];\r\n}\r\nexport function drawText(canvas, options, lines) {\r\n    var style = options.textStyle, frame = options.frame;\r\n    // Shadow:\r\n    var resetShadow = setShadow(canvas, style.textShadowColor, style.textShadowOffsetX, style.textShadowOffsetY, style.textShadowBlur);\r\n    for (var i = 0; i < lines.length; i++) {\r\n        var line = lines[i];\r\n        var x = frame.x;\r\n        switch (style.textAlign) {\r\n            case 'center':\r\n                x = x + frame.width / 2 - line.width / 2;\r\n                break;\r\n            case 'right':\r\n                x = x + frame.width - line.width;\r\n                break;\r\n        }\r\n        canvas.context.fillText(line.text, x, style.lineHeight * (i + 0.5) + frame.y);\r\n    }\r\n    resetShadow();\r\n}\r\n","references":["/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Canvas.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/components/common/drawText.d.ts","writeByteOrderMark":false,"text":"import { Frame } from '../../core/Node';\r\nimport { RevasCanvas } from '../../core/Canvas';\r\nexport interface DrawTextOptions {\r\n    textStyle: any;\r\n    numberOfLines: number;\r\n    frame: Frame;\r\n    content: string;\r\n}\r\nexport declare type MeasureLine = {\r\n    width: number;\r\n    text: string;\r\n};\r\nexport declare type MeasureResult = [MeasureLine[], number];\r\nexport declare const DEFAULT_MEASURE: MeasureResult;\r\nexport declare function applyTextStyle(canvas: RevasCanvas, options: DrawTextOptions): void;\r\nexport declare function measureText(canvas: RevasCanvas, options: DrawTextOptions): MeasureResult;\r\nexport declare function drawText(canvas: RevasCanvas, options: DrawTextOptions, lines: MeasureLine[]): void;\r\n"}}
