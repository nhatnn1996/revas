{"code":"import { __assign, __extends } from \"tslib\";\r\nimport * as React from 'react';\r\nimport { getFrameFromNode } from '../core/utils';\r\nvar DEFAULT_STYLE = { path: true };\r\nvar LinearGradient = /** @class */ (function (_super) {\r\n    __extends(LinearGradient, _super);\r\n    function LinearGradient() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    LinearGradient.prototype.render = function () {\r\n        return React.createElement('LinearGradient', __assign(__assign({}, this.props), { style: [DEFAULT_STYLE, this.props.style], customDrawer: drawGradient }));\r\n    };\r\n    return LinearGradient;\r\n}(React.Component));\r\nexport default LinearGradient;\r\nfunction drawGradient(canvas, node) {\r\n    var colors = node.props.colors;\r\n    if (colors && colors.length > 0) {\r\n        var _a = node.props, _b = _a.start, start = _b === void 0 ? { x: 0, y: 0 } : _b, _c = _a.end, end = _c === void 0 ? { x: 1, y: 0 } : _c;\r\n        var frame = getFrameFromNode(node);\r\n        var grad = canvas.context.createLinearGradient(start.x * frame.width + frame.x, start.y * frame.height + frame.y, end.x * frame.width + frame.x, end.y * frame.height + frame.y);\r\n        for (var i = 0; i < colors.length; i++) {\r\n            grad.addColorStop(i / (colors.length - 1), colors[i]);\r\n        }\r\n        canvas.context.fillStyle = grad;\r\n        canvas.context.fill();\r\n    }\r\n}\r\n","references":["/Users/fimplus/Desktop/revasReal/node_modules/@types/react/index.d.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Canvas.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/components/LinearGradient.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { NodeProps, Node } from '../core/Node';\r\nimport { RevasCanvas } from '../core/Canvas';\r\nexport declare type LinearGradientProps = {\r\n    start?: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    end?: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    colors: string[];\r\n} & NodeProps;\r\nexport default class LinearGradient extends React.Component<LinearGradientProps> {\r\n    render(): React.ReactElement<{\r\n        style: any[];\r\n        customDrawer: typeof drawGradient;\r\n        start?: {\r\n            x: number;\r\n            y: number;\r\n        } | undefined;\r\n        end?: {\r\n            x: number;\r\n            y: number;\r\n        } | undefined;\r\n        colors: string[];\r\n        onTouchStart?: import(\"../core/Node\").RevasTouchEventListener | undefined;\r\n        onTouchMove?: import(\"../core/Node\").RevasTouchEventListener | undefined;\r\n        onTouchEnd?: import(\"../core/Node\").RevasTouchEventListener | undefined;\r\n        onLayout?: ((frame: import(\"../core/Node\").Frame) => any) | undefined;\r\n        pointerEvents?: \"auto\" | \"none\" | \"box-none\" | undefined;\r\n        $ready?: boolean | undefined;\r\n        children?: React.ReactNode;\r\n        cache?: string | boolean | undefined;\r\n        forceCache?: boolean | undefined;\r\n    }, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;\r\n}\r\ndeclare function drawGradient(canvas: RevasCanvas, node: Node): void;\r\nexport {};\r\n"}}
