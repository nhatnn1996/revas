{"code":"import { __extends, __rest, __spreadArrays } from \"tslib\";\r\nimport * as React from 'react';\r\nimport { drawText, measureText, applyTextStyle, DEFAULT_MEASURE } from './common/drawText';\r\nimport { getFrameFromNode, flatten, applyAnimated } from '../core/utils';\r\nvar Text = /** @class */ (function (_super) {\r\n    __extends(Text, _super);\r\n    function Text() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = { height: 0 };\r\n        _this._measured = DEFAULT_MEASURE;\r\n        _this.drawText = function (canvas, node) {\r\n            var content = getTextFromNode(node);\r\n            if (content) {\r\n                var options = {\r\n                    numberOfLines: node.props.numberOfLines || 0,\r\n                    textStyle: getTextStyleFromNode(node),\r\n                    frame: getFrameFromNode(node),\r\n                    content: content,\r\n                };\r\n                applyTextStyle(canvas, options);\r\n                if (textPropsChanged(options, _this._drawed)) {\r\n                    _this._measured = measureText(canvas, options);\r\n                    _this._drawed = options;\r\n                }\r\n                var _a = _this._measured, lines = _a[0], height = _a[1];\r\n                if (height !== _this.state.height) {\r\n                    _this.setState({ height: height });\r\n                }\r\n                else {\r\n                    drawText(canvas, options, lines);\r\n                }\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    Text.prototype.render = function () {\r\n        var _a = this.props, children = _a.children, numberOfLines = _a.numberOfLines, others = __rest(_a, [\"children\", \"numberOfLines\"]);\r\n        return React.createElement('View', others, React.createElement('Text', {\r\n            content: children,\r\n            customDrawer: this.drawText,\r\n            textStyle: others.style,\r\n            style: this.state,\r\n            numberOfLines: numberOfLines,\r\n            $ready: Boolean(this._drawed),\r\n        }));\r\n    };\r\n    return Text;\r\n}(React.Component));\r\nexport default Text;\r\nvar TEXT_STYLES_LIST = [\r\n    'fontStyle',\r\n    'fontWeight',\r\n    'fontSize',\r\n    'fontFamily',\r\n    'textBaseline',\r\n    'wordBreak',\r\n    'lineHeight',\r\n];\r\nvar DEFAULT_TEXTSTYLE = {\r\n    fontFamily: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue'\",\r\n    fontWeight: 'normal',\r\n    fontSize: 14,\r\n    color: '#000',\r\n    fontStyle: 'normal',\r\n    textBaseline: 'middle',\r\n};\r\nfunction textStyleChanged(left, right) {\r\n    for (var i = 0; i < TEXT_STYLES_LIST.length; i++) {\r\n        var item = TEXT_STYLES_LIST[i];\r\n        if (left[item] !== right[item]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction textPropsChanged(left, right) {\r\n    if (!right) {\r\n        return true;\r\n    }\r\n    if (left.content !== right.content) {\r\n        return true;\r\n    }\r\n    if (left.numberOfLines !== right.numberOfLines) {\r\n        return true;\r\n    }\r\n    if (left.frame.width !== right.frame.width) {\r\n        return true;\r\n    }\r\n    return textStyleChanged(left.textStyle, right.textStyle);\r\n}\r\nfunction getTextFromNode(node) {\r\n    var frame = getFrameFromNode(node);\r\n    if (frame.width > 0) {\r\n        var content = node.props.content;\r\n        if (typeof content === 'string') {\r\n            return content;\r\n        }\r\n        else if (Array.isArray(content)) {\r\n            return content.join('');\r\n        }\r\n    }\r\n    return '';\r\n}\r\nfunction getTextStyleFromNode(node) {\r\n    var style = Object.assign.apply(Object, __spreadArrays([{}, DEFAULT_TEXTSTYLE], flatten([node.props.textStyle])));\r\n    style.lineHeight = style.lineHeight || style.fontSize * 1.1;\r\n    return applyAnimated(style);\r\n}\r\n// TODO: nested text support\r\n","references":["/Users/fimplus/Desktop/revasReal/node_modules/@types/react/index.d.ts","/Users/fimplus/Desktop/revasReal/src/revas/components/common/drawText.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Canvas.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/components/Text.d.ts","writeByteOrderMark":false,"text":"import * as React from 'react';\r\nimport { DrawTextOptions } from './common/drawText';\r\nimport { NodeProps, Node } from '../core/Node';\r\nimport { RevasCanvas } from '../core/Canvas';\r\nexport declare type TextProps = {\r\n    numberOfLines?: number;\r\n} & NodeProps;\r\nexport default class Text extends React.Component<TextProps> {\r\n    state: {\r\n        height: number;\r\n    };\r\n    _measured: import(\"./common/drawText\").MeasureResult;\r\n    _drawed?: DrawTextOptions;\r\n    drawText: (canvas: RevasCanvas, node: Node<any>) => void;\r\n    render(): React.DOMElement<any, Element>;\r\n}\r\n"}}
