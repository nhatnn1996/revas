{"code":"import { __spreadArrays } from \"tslib\";\r\nimport { flatten } from '../utils';\r\nimport { promise, yoga as Yoga } from './init';\r\nfunction funcName(key) {\r\n    return \"set\" + key[0].toUpperCase() + key.substr(1);\r\n}\r\nfunction checkAndRun(yoga, key) {\r\n    var values = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        values[_i - 2] = arguments[_i];\r\n    }\r\n    if (yoga[key]) {\r\n        yoga[key].apply(yoga, values);\r\n    }\r\n    else {\r\n        throw new Error(\"ReCanvas: No Such Style Func - \" + key);\r\n    }\r\n}\r\nfunction parseValue(func, value) {\r\n    if (typeof value === 'number') {\r\n        return [func, value];\r\n    }\r\n    else if (value === 'auto') {\r\n        return [func + \"Auto\"];\r\n    }\r\n    else if (value.endsWith('%')) {\r\n        return [func + \"Percent\", Number(value.slice(0, -1))];\r\n    }\r\n    else {\r\n        throw new Error(\"ReCanvas: No Such Style Value - \" + value);\r\n    }\r\n}\r\nfunction parseEnum(func, enums, value) {\r\n    if (enums[value] !== undefined) {\r\n        return [func, enums[value]];\r\n    }\r\n    else {\r\n        throw new Error(\"ReCanvas: No Such Style Value - \" + value);\r\n    }\r\n}\r\nfunction parseEdge(func, edge, value) {\r\n    if (typeof value === 'number') {\r\n        return [func, edge, value];\r\n    }\r\n    else if (value === 'auto') {\r\n        return [func + \"Auto\", edge];\r\n    }\r\n    else if (value.endsWith('%')) {\r\n        return [func + \"Percent\", edge, Number(value.slice(0, -1))];\r\n    }\r\n    else {\r\n        throw new Error(\"ReCanvas: No Such Style Value - \" + value);\r\n    }\r\n}\r\nvar STYLE_MAP = {};\r\nfunction init() {\r\n    var ALIGN_ENUM = {\r\n        auto: Yoga.ALIGN_AUTO,\r\n        baseline: Yoga.ALIGN_BASELINE,\r\n        center: Yoga.ALIGN_CENTER,\r\n        'flex-end': Yoga.ALIGN_FLEX_END,\r\n        'flex-start': Yoga.ALIGN_FLEX_START,\r\n        'space-around': Yoga.ALIGN_SPACE_AROUND,\r\n        'space-between': Yoga.ALIGN_SPACE_BETWEEN,\r\n        stretch: Yoga.ALIGN_STRETCH,\r\n    };\r\n    var AVAILABLE = {\r\n        VALUE: [\r\n            'flex',\r\n            'width',\r\n            'height',\r\n            'minWidth',\r\n            'maxWidth',\r\n            'minHeight',\r\n            'maxHeight',\r\n            'flexGrow',\r\n            'flexShrink',\r\n            'aspectRatio',\r\n        ],\r\n        ENUM: [\r\n            {\r\n                key: 'justifyContent',\r\n                enum: {\r\n                    center: Yoga.JUSTIFY_CENTER,\r\n                    'flex-end': Yoga.JUSTIFY_FLEX_END,\r\n                    'flex-start': Yoga.JUSTIFY_FLEX_START,\r\n                    'space-around': Yoga.JUSTIFY_SPACE_AROUND,\r\n                    'space-between': Yoga.JUSTIFY_SPACE_BETWEEN,\r\n                    'space-evenly': Yoga.JUSTIFY_SPACE_EVENLY,\r\n                },\r\n            },\r\n            { key: 'alignItems', enum: ALIGN_ENUM },\r\n            { key: 'alignSelf', enum: ALIGN_ENUM },\r\n            { key: 'alignContent', enum: ALIGN_ENUM },\r\n            {\r\n                key: 'flexWrap',\r\n                enum: {\r\n                    'no-wrap': Yoga.WRAP_NO_WRAP,\r\n                    wrap: Yoga.WRAP_WRAP,\r\n                    'wrap-reverse': Yoga.WRAP_WRAP_REVERSE,\r\n                },\r\n            },\r\n            {\r\n                key: 'flexDirection',\r\n                enum: {\r\n                    column: Yoga.FLEX_DIRECTION_COLUMN,\r\n                    'column-reverse': Yoga.FLEX_DIRECTION_COLUMN_REVERSE,\r\n                    count: Yoga.FLEX_DIRECTION_COUNT,\r\n                    row: Yoga.FLEX_DIRECTION_ROW,\r\n                    'row-reverse': Yoga.FLEX_DIRECTION_ROW_REVERSE,\r\n                },\r\n            },\r\n            {\r\n                key: 'position',\r\n                remap: 'positionType',\r\n                enum: {\r\n                    relative: Yoga.POSITION_TYPE_RELATIVE,\r\n                    absolute: Yoga.POSITION_TYPE_ABSOLUTE,\r\n                    count: Yoga.POSITION_TYPE_COUNT,\r\n                },\r\n            },\r\n        ],\r\n        EDGE: [\r\n            { key: 'padding', remap: 'padding', edge: Yoga.EDGE_ALL },\r\n            { key: 'paddingLeft', remap: 'padding', edge: Yoga.EDGE_LEFT },\r\n            { key: 'paddingRight', remap: 'padding', edge: Yoga.EDGE_RIGHT },\r\n            { key: 'paddingTop', remap: 'padding', edge: Yoga.EDGE_TOP },\r\n            { key: 'paddingBottom', remap: 'padding', edge: Yoga.EDGE_BOTTOM },\r\n            { key: 'left', remap: 'position', edge: Yoga.EDGE_LEFT },\r\n            { key: 'right', remap: 'position', edge: Yoga.EDGE_RIGHT },\r\n            { key: 'top', remap: 'position', edge: Yoga.EDGE_TOP },\r\n            { key: 'bottom', remap: 'position', edge: Yoga.EDGE_BOTTOM },\r\n            { key: 'margin', remap: 'margin', edge: Yoga.EDGE_ALL },\r\n            { key: 'marginLeft', remap: 'margin', edge: Yoga.EDGE_LEFT },\r\n            { key: 'marginRight', remap: 'margin', edge: Yoga.EDGE_RIGHT },\r\n            { key: 'marginTop', remap: 'margin', edge: Yoga.EDGE_TOP },\r\n            { key: 'marginBottom', remap: 'margin', edge: Yoga.EDGE_BOTTOM },\r\n            { key: 'borderWidth', remap: 'border', edge: Yoga.EDGE_ALL },\r\n            { key: 'borderLeftWidth', remap: 'border', edge: Yoga.EDGE_LEFT },\r\n            { key: 'borderRightWidth', remap: 'border', edge: Yoga.EDGE_RIGHT },\r\n            { key: 'borderTopWidth', remap: 'border', edge: Yoga.EDGE_TOP },\r\n            { key: 'borderBottomWidth', remap: 'border', edge: Yoga.EDGE_BOTTOM },\r\n        ],\r\n    };\r\n    AVAILABLE.VALUE.forEach(function (key) {\r\n        var func = funcName(key);\r\n        STYLE_MAP[key] = function (value) { return parseValue(func, value); };\r\n    });\r\n    AVAILABLE.ENUM.forEach(function (item) {\r\n        var func = funcName(item.remap || item.key);\r\n        var enums = item.enum;\r\n        STYLE_MAP[item.key] = function (value) { return parseEnum(func, enums, value); };\r\n    });\r\n    AVAILABLE.EDGE.forEach(function (item) {\r\n        var func = funcName(item.remap);\r\n        var edge = item.edge;\r\n        STYLE_MAP[item.key] = function (value) { return parseEdge(func, edge, value); };\r\n    });\r\n}\r\npromise.then(init);\r\n// function _apply(yoga: Yoga.YogaNode, style: any) {\r\n//   for (const key in style) {\r\n//     const func = STYLE_MAP[key]\r\n//     func && checkAndRun(yoga, ...func(style[key]))\r\n//   }\r\n// }\r\nvar cache = new WeakMap();\r\nfunction _apply(yoga, style) {\r\n    if (style) {\r\n        if (!cache.has(style)) {\r\n            var _styles = [];\r\n            for (var key in style) {\r\n                var func = STYLE_MAP[key];\r\n                func && _styles.push(func(style[key]));\r\n            }\r\n            cache.set(style, _styles);\r\n        }\r\n        var styles = cache.get(style);\r\n        for (var i = 0; i < styles.length; i++) {\r\n            checkAndRun.apply(void 0, __spreadArrays([yoga], styles[i]));\r\n        }\r\n    }\r\n}\r\nexport default function apply(yoga, style) {\r\n    if (style) {\r\n        flatten([style]).forEach(function (s) { return _apply(yoga, s); });\r\n    }\r\n}\r\n","references":["/Users/fimplus/Desktop/revasReal/src/revas/core/utils.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/yoga-layout/init.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/core/yoga-layout/style.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"yoga-layout\" />\r\nimport type { YogaNode } from 'yoga-layout-wasm/asm';\r\nexport default function apply(yoga: YogaNode, style: any): void;\r\n"}}
