{"code":"import { yoga as Yoga } from './init';\r\nimport { Frame } from '../Node';\r\nimport apply from './style';\r\nfunction _updateLayout(node) {\r\n    var yoga = Yoga.Node.create();\r\n    var children = [];\r\n    apply(yoga, node.props.style);\r\n    for (var i = 0; i < node.children.length; i++) {\r\n        var child = node.children[i];\r\n        var _a = _updateLayout(child), f = _a[0], y = _a[1];\r\n        var index = children.push(f);\r\n        yoga.insertChild(y, index - 1);\r\n    }\r\n    function process(x, y) {\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        var _a = yoga.getComputedLayout(), left = _a.left, top = _a.top, width = _a.width, height = _a.height;\r\n        node.frame = new Frame(x + left, y + top, width, height);\r\n        node.props.onLayout && node.props.onLayout(node.frame);\r\n        for (var i = 0; i < children.length; i++) {\r\n            children[i](node.frame.x, node.frame.y);\r\n        }\r\n        yoga.free();\r\n    }\r\n    return [process, yoga];\r\n}\r\nexport function updateLayout(root) {\r\n    var _a = _updateLayout(root), process = _a[0], yoga = _a[1];\r\n    var _b = root.props, clientWidth = _b.clientWidth, clientHeight = _b.clientHeight, RTL = _b.RTL;\r\n    yoga.calculateLayout(clientWidth, clientHeight, RTL ? Yoga.DIRECTION_RTL : Yoga.DIRECTION_LTR);\r\n    return process;\r\n}\r\n","references":["/Users/fimplus/Desktop/revasReal/src/revas/core/yoga-layout/init.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/yoga-layout/style.ts","/Users/fimplus/Desktop/revasReal/src/revas/components/Context.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/core/yoga-layout/index.d.ts","writeByteOrderMark":false,"text":"import { Node } from '../Node';\r\nimport { AppContextType } from '../../components/Context';\r\nexport declare function updateLayout(root: Node<AppContextType>): Function;\r\n"}}
