{"code":"import { __assign, __extends, __rest } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport Scroller from \"./common/Scroller\";\r\nimport { AnimatedValue } from \"../core/Animated\";\r\nvar ScrollView = /** @class */ (function (_super) {\r\n    __extends(ScrollView, _super);\r\n    function ScrollView() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._height = -1;\r\n        _this._contentHeight = -1;\r\n        _this._width = -1;\r\n        _this._contentWidth = -1;\r\n        _this._innerStyle = {\r\n            translateX: new AnimatedValue(0),\r\n            translateY: new AnimatedValue(0),\r\n            position: \"absolute\",\r\n            animated: true,\r\n        };\r\n        _this._offset = { x: 0, y: 0 };\r\n        _this._scroller = new Scroller(function (e) {\r\n            var _a = _this._offset, _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c;\r\n            _this.props.horizontal ? _this._innerStyle.translateX.setValue(x - e.x) : _this._innerStyle.translateY.setValue(y - e.y);\r\n        });\r\n        _this.handleKey = function (e) {\r\n            _this._scroller.touchStart(e);\r\n        };\r\n        _this._onLayout = function (frame) {\r\n            if (_this._width !== frame.width || _this._height !== frame.height) {\r\n                _this._height = frame.height;\r\n                _this._width = frame.width;\r\n                _this._checkLayout();\r\n                if (_this.props.paging) {\r\n                    if (_this.props.horizontal) {\r\n                        _this._scroller.pagingX = _this.props.paging === true ? frame.width : _this.props.paging;\r\n                    }\r\n                    else {\r\n                        _this._scroller.pagingY = _this.props.paging === true ? frame.height : _this.props.paging;\r\n                    }\r\n                }\r\n            }\r\n            _this.props.onLayout && _this.props.onLayout(frame);\r\n        };\r\n        _this._onContentLayout = function (frame) {\r\n            var _a = _this._offset, _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c;\r\n            var width = frame.width + x;\r\n            var height = frame.height + y;\r\n            if (_this._contentWidth !== width || _this._contentHeight !== height) {\r\n                _this._contentHeight = height;\r\n                _this._contentWidth = width;\r\n                _this._checkLayout();\r\n            }\r\n        };\r\n        _this._checkLayout = function () {\r\n            var maxX = _this._contentWidth - _this._width;\r\n            var maxY = _this._contentHeight - _this._height;\r\n            if ((maxX > 0 && maxX !== _this._scroller.maxX) || (maxY > 0 && maxY !== _this._scroller.maxY)) {\r\n                _this._scroller.maxX = maxX;\r\n                _this._scroller.maxY = maxY;\r\n                _this._scroller.emit(\"none\");\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    ScrollView.prototype.componentWillUnmount = function () {\r\n        this._scroller.cancel();\r\n    };\r\n    ScrollView.prototype.componentDidMount = function () {\r\n        window.addEventListener(\"keydown\", this.handleKey);\r\n        // window.addEventListener(\"keyup\", this.handleKey);\r\n    };\r\n    ScrollView.prototype.render = function () {\r\n        var _a;\r\n        var _b = this.props, children = _b.children, horizontal = _b.horizontal, offset = _b.offset, others = __rest(_b, [\"children\", \"horizontal\", \"offset\"]);\r\n        this._scroller.horizontal = horizontal;\r\n        if (offset) {\r\n            this._offset = offset;\r\n            this._scroller.emit(\"none\");\r\n        }\r\n        return React.createElement(\"Scrollable\", __assign(__assign({}, others), { onLayout: this._onLayout }), React.createElement(\"ScrollContent\", {\r\n            onTouchStart: this._scroller.touchStart,\r\n            onTouchMove: this._scroller.touchMove,\r\n            onTouchEnd: this._scroller.touchEnd,\r\n            onLayout: this._onContentLayout,\r\n            style: [\r\n                this._innerStyle,\r\n                (_a = {\r\n                        flexDirection: horizontal ? \"row\" : \"column\"\r\n                    },\r\n                    _a[horizontal ? \"height\" : \"width\"] = \"100%\",\r\n                    _a),\r\n            ],\r\n            children: children,\r\n        }));\r\n    };\r\n    return ScrollView;\r\n}(React.Component));\r\nexport default ScrollView;\r\n","references":["/Users/fimplus/Desktop/revasReal/node_modules/@types/react/index.d.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Node.ts","/Users/fimplus/Desktop/revasReal/src/revas/components/common/Scroller.ts","/Users/fimplus/Desktop/revasReal/src/revas/core/Animated.ts"],"dts":{"name":"/Users/fimplus/Desktop/revasReal/dist/types/revas/components/ScrollView.d.ts","writeByteOrderMark":false,"text":"import * as React from \"react\";\r\nimport { NodeProps, Frame } from \"../core/Node\";\r\nimport { RevasScrollEvent } from \"./common/Scroller\";\r\nexport declare type ScrollViewOffset = {\r\n    x?: number;\r\n    y?: number;\r\n};\r\nexport declare type ScrollViewProps = {\r\n    horizontal?: boolean;\r\n    onScroll?: (e: RevasScrollEvent) => any;\r\n    onScrollStart?: (e: RevasScrollEvent) => any;\r\n    onScrollEnd?: (e: RevasScrollEvent) => any;\r\n    paging?: boolean | number;\r\n    offset?: ScrollViewOffset;\r\n} & NodeProps;\r\nexport default class ScrollView extends React.Component<ScrollViewProps> {\r\n    private _height;\r\n    private _contentHeight;\r\n    private _width;\r\n    private _contentWidth;\r\n    private _innerStyle;\r\n    private _offset;\r\n    private _scroller;\r\n    componentWillUnmount(): void;\r\n    handleKey: (e: KeyboardEvent) => void;\r\n    componentDidMount(): void;\r\n    private _onLayout;\r\n    private _onContentLayout;\r\n    private _checkLayout;\r\n    render(): React.ReactElement<{\r\n        onLayout: (frame: Frame) => void;\r\n        onScroll?: ((e: RevasScrollEvent) => any) | undefined;\r\n        onScrollStart?: ((e: RevasScrollEvent) => any) | undefined;\r\n        onScrollEnd?: ((e: RevasScrollEvent) => any) | undefined;\r\n        paging?: number | boolean | undefined;\r\n        onTouchStart?: import(\"../core/Node\").RevasTouchEventListener | undefined;\r\n        onTouchMove?: import(\"../core/Node\").RevasTouchEventListener | undefined;\r\n        onTouchEnd?: import(\"../core/Node\").RevasTouchEventListener | undefined;\r\n        pointerEvents?: \"auto\" | \"none\" | \"box-none\" | undefined;\r\n        $ready?: boolean | undefined;\r\n        style?: any;\r\n        cache?: string | boolean | undefined;\r\n        forceCache?: boolean | undefined;\r\n    }, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;\r\n}\r\n"}}
