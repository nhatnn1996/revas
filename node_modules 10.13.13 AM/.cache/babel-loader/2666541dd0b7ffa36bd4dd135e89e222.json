{"ast":null,"code":"import * as imageLoader from './imageLoader';\nimport { clamp, getMergedStyleFromNode, getFrameFromNode } from '../../core/utils';\nexport default function drawImage(canvas, node, flags) {\n  var image = imageLoader.get(node.props.src);\n\n  if (image.height <= 0) {\n    return;\n  }\n\n  var frame = getFrameFromNode(node);\n  var width = frame.width,\n      height = frame.height,\n      x = frame.x,\n      y = frame.y;\n\n  if (width <= 0 || height <= 0) {\n    return;\n  }\n\n  var style = getMergedStyleFromNode(node);\n  var actualSize = {\n    width: image.width,\n    height: image.height\n  };\n  var focusPoint = style.focusPoint || {\n    x: actualSize.width * 0.5,\n    y: actualSize.height * 0.5\n  };\n  var hasClip = flags.hasRadius && !flags.hasClip;\n\n  if (hasClip) {\n    canvas.context.save();\n    canvas.context.clip();\n  }\n\n  if (style.resizeMode === 'contain') {\n    var scale = Math.min(width / actualSize.width, height / actualSize.height) || 1;\n    var scaledSize = {\n      width: actualSize.width * scale,\n      height: actualSize.height * scale\n    }; // Clip the image to rectangle (sx, sy, sw, sh).\n\n    var sw = Math.round(actualSize.width);\n    var sh = Math.round(actualSize.height); // Scale the image to dimensions (dw, dh).\n\n    var dw = Math.round(scaledSize.width);\n    var dh = Math.round(scaledSize.height); // Draw the image on the canvas at coordinates (dx, dy).\n\n    var dx = Math.round((width - scaledSize.width) / 2 + x);\n    var dy = Math.round((height - scaledSize.height) / 2 + y);\n    canvas.context.drawImage(image, 0, 0, sw, sh, dx, dy, dw, dh);\n  } else {\n    var _scale = Math.max(width / actualSize.width, height / actualSize.height) || 1;\n\n    var _scaledSize = {\n      width: actualSize.width * _scale,\n      height: actualSize.height * _scale\n    }; // Clip the image to rectangle (sx, sy, sw, sh).\n\n    var sx = Math.round(clamp(width * 0.5 - focusPoint.x * _scale, width - _scaledSize.width, 0)) * (-1 / _scale);\n\n    var sy = Math.round(clamp(height * 0.5 - focusPoint.y * _scale, height - _scaledSize.height, 0)) * (-1 / _scale);\n\n    var _sw = Math.round(actualSize.width - sx * 2);\n\n    var _sh = Math.round(actualSize.height - sy * 2); // Scale the image to dimensions (dw, dh).\n\n\n    var _dw = Math.round(width);\n\n    var _dh = Math.round(height); // Draw the image on the canvas at coordinates (dx, dy).\n\n\n    var _dx = Math.round(x);\n\n    var _dy = Math.round(y);\n\n    canvas.context.drawImage(image, sx, sy, _sw, _sh, _dx, _dy, _dw, _dh);\n  }\n\n  if (hasClip) {\n    canvas.context.restore();\n  }\n}","map":{"version":3,"sources":["/Users/fimplus/Desktop/revasReal/src/revas/components/common/drawImage.ts"],"names":["imageLoader","clamp","getMergedStyleFromNode","getFrameFromNode","drawImage","canvas","node","flags","image","get","props","src","height","frame","width","x","y","style","actualSize","focusPoint","hasClip","hasRadius","context","save","clip","resizeMode","scale","Math","min","scaledSize","sw","round","sh","dw","dh","dx","dy","max","sx","sy","restore"],"mappings":"AACA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,SAASC,KAAT,EAAgBC,sBAAhB,EAAwCC,gBAAxC,QAAgE,kBAAhE;AAGA,eAAe,SAASC,SAAT,CAAmBC,MAAnB,EAAwCC,IAAxC,EAAoDC,KAApD,EAAgE;AAC7E,MAAMC,KAAK,GAAGR,WAAW,CAACS,GAAZ,CAAgBH,IAAI,CAACI,KAAL,CAAWC,GAA3B,CAAd;;AACA,MAAIH,KAAK,CAACI,MAAN,IAAgB,CAApB,EAAuB;AACrB;AACD;;AACD,MAAMC,KAAK,GAAGV,gBAAgB,CAACG,IAAD,CAA9B;AAL6E,MAMrEQ,KANqE,GAM7CD,KAN6C,CAMrEC,KANqE;AAAA,MAM9DF,MAN8D,GAM7CC,KAN6C,CAM9DD,MAN8D;AAAA,MAMtDG,CANsD,GAM7CF,KAN6C,CAMtDE,CANsD;AAAA,MAMnDC,CANmD,GAM7CH,KAN6C,CAMnDG,CANmD;;AAO7E,MAAIF,KAAK,IAAI,CAAT,IAAcF,MAAM,IAAI,CAA5B,EAA+B;AAC7B;AACD;;AACD,MAAMK,KAAK,GAAGf,sBAAsB,CAACI,IAAD,CAApC;AAEA,MAAMY,UAAU,GAAG;AACjBJ,IAAAA,KAAK,EAAEN,KAAK,CAACM,KADI;AAEjBF,IAAAA,MAAM,EAAEJ,KAAK,CAACI;AAFG,GAAnB;AAKA,MAAMO,UAAU,GAAGF,KAAK,CAACE,UAAN,IAAoB;AACrCJ,IAAAA,CAAC,EAAEG,UAAU,CAACJ,KAAX,GAAmB,GADe;AAErCE,IAAAA,CAAC,EAAEE,UAAU,CAACN,MAAX,GAAoB;AAFc,GAAvC;AAKA,MAAMQ,OAAO,GAAGb,KAAK,CAACc,SAAN,IAAmB,CAACd,KAAK,CAACa,OAA1C;;AAEA,MAAIA,OAAJ,EAAa;AACXf,IAAAA,MAAM,CAACiB,OAAP,CAAeC,IAAf;AACAlB,IAAAA,MAAM,CAACiB,OAAP,CAAeE,IAAf;AACD;;AAED,MAAIP,KAAK,CAACQ,UAAN,KAAqB,SAAzB,EAAoC;AAClC,QAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASd,KAAK,GAAGI,UAAU,CAACJ,KAA5B,EAAmCF,MAAM,GAAGM,UAAU,CAACN,MAAvD,KAAkE,CAAhF;AAEA,QAAMiB,UAAU,GAAG;AACjBf,MAAAA,KAAK,EAAEI,UAAU,CAACJ,KAAX,GAAmBY,KADT;AAEjBd,MAAAA,MAAM,EAAEM,UAAU,CAACN,MAAX,GAAoBc;AAFX,KAAnB,CAHkC,CAQlC;;AACA,QAAMI,EAAE,GAAGH,IAAI,CAACI,KAAL,CAAWb,UAAU,CAACJ,KAAtB,CAAX;AACA,QAAMkB,EAAE,GAAGL,IAAI,CAACI,KAAL,CAAWb,UAAU,CAACN,MAAtB,CAAX,CAVkC,CAYlC;;AACA,QAAMqB,EAAE,GAAGN,IAAI,CAACI,KAAL,CAAWF,UAAU,CAACf,KAAtB,CAAX;AACA,QAAMoB,EAAE,GAAGP,IAAI,CAACI,KAAL,CAAWF,UAAU,CAACjB,MAAtB,CAAX,CAdkC,CAgBlC;;AACA,QAAMuB,EAAE,GAAGR,IAAI,CAACI,KAAL,CAAW,CAACjB,KAAK,GAAGe,UAAU,CAACf,KAApB,IAA6B,CAA7B,GAAiCC,CAA5C,CAAX;AACA,QAAMqB,EAAE,GAAGT,IAAI,CAACI,KAAL,CAAW,CAACnB,MAAM,GAAGiB,UAAU,CAACjB,MAArB,IAA+B,CAA/B,GAAmCI,CAA9C,CAAX;AAEAX,IAAAA,MAAM,CAACiB,OAAP,CAAelB,SAAf,CAAyBI,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsCsB,EAAtC,EAA0CE,EAA1C,EAA8CG,EAA9C,EAAkDC,EAAlD,EAAsDH,EAAtD,EAA0DC,EAA1D;AACD,GArBD,MAqBO;AACL,QAAMR,MAAK,GAAGC,IAAI,CAACU,GAAL,CAASvB,KAAK,GAAGI,UAAU,CAACJ,KAA5B,EAAmCF,MAAM,GAAGM,UAAU,CAACN,MAAvD,KAAkE,CAAhF;;AAEA,QAAMiB,WAAU,GAAG;AACjBf,MAAAA,KAAK,EAAEI,UAAU,CAACJ,KAAX,GAAmBY,MADT;AAEjBd,MAAAA,MAAM,EAAEM,UAAU,CAACN,MAAX,GAAoBc;AAFX,KAAnB,CAHK,CAQL;;AACA,QAAMY,EAAE,GAAGX,IAAI,CAACI,KAAL,CAAW9B,KAAK,CAACa,KAAK,GAAG,GAAR,GAAcK,UAAU,CAACJ,CAAX,GAAeW,MAA9B,EAAqCZ,KAAK,GAAGe,WAAU,CAACf,KAAxD,EAA+D,CAA/D,CAAhB,KAAsF,CAAC,CAAD,GAAKY,MAA3F,CAAX;;AACA,QAAMa,EAAE,GAAGZ,IAAI,CAACI,KAAL,CAAW9B,KAAK,CAACW,MAAM,GAAG,GAAT,GAAeO,UAAU,CAACH,CAAX,GAAeU,MAA/B,EAAsCd,MAAM,GAAGiB,WAAU,CAACjB,MAA1D,EAAkE,CAAlE,CAAhB,KAAyF,CAAC,CAAD,GAAKc,MAA9F,CAAX;;AACA,QAAMI,GAAE,GAAGH,IAAI,CAACI,KAAL,CAAWb,UAAU,CAACJ,KAAX,GAAmBwB,EAAE,GAAG,CAAnC,CAAX;;AACA,QAAMN,GAAE,GAAGL,IAAI,CAACI,KAAL,CAAWb,UAAU,CAACN,MAAX,GAAoB2B,EAAE,GAAG,CAApC,CAAX,CAZK,CAcL;;;AACA,QAAMN,GAAE,GAAGN,IAAI,CAACI,KAAL,CAAWjB,KAAX,CAAX;;AACA,QAAMoB,GAAE,GAAGP,IAAI,CAACI,KAAL,CAAWnB,MAAX,CAAX,CAhBK,CAkBL;;;AACA,QAAMuB,GAAE,GAAGR,IAAI,CAACI,KAAL,CAAWhB,CAAX,CAAX;;AACA,QAAMqB,GAAE,GAAGT,IAAI,CAACI,KAAL,CAAWf,CAAX,CAAX;;AAEAX,IAAAA,MAAM,CAACiB,OAAP,CAAelB,SAAf,CAAyBI,KAAzB,EAAgC8B,EAAhC,EAAoCC,EAApC,EAAwCT,GAAxC,EAA4CE,GAA5C,EAAgDG,GAAhD,EAAoDC,GAApD,EAAwDH,GAAxD,EAA4DC,GAA5D;AACD;;AACD,MAAId,OAAJ,EAAa;AACXf,IAAAA,MAAM,CAACiB,OAAP,CAAekB,OAAf;AACD;AACF","sourcesContent":["import { Node } from '../../core/Node';\nimport * as imageLoader from './imageLoader';\nimport { clamp, getMergedStyleFromNode, getFrameFromNode } from '../../core/utils';\nimport { RevasCanvas } from '../../core/Canvas';\n\nexport default function drawImage(canvas: RevasCanvas, node: Node, flags: any) {\n  const image = imageLoader.get(node.props.src);\n  if (image.height <= 0) {\n    return;\n  }\n  const frame = getFrameFromNode(node);\n  const { width, height, x, y } = frame;\n  if (width <= 0 || height <= 0) {\n    return;\n  }\n  const style = getMergedStyleFromNode(node);\n\n  const actualSize = {\n    width: image.width,\n    height: image.height,\n  };\n\n  const focusPoint = style.focusPoint || {\n    x: actualSize.width * 0.5,\n    y: actualSize.height * 0.5,\n  };\n\n  const hasClip = flags.hasRadius && !flags.hasClip;\n\n  if (hasClip) {\n    canvas.context.save();\n    canvas.context.clip();\n  }\n\n  if (style.resizeMode === 'contain') {\n    const scale = Math.min(width / actualSize.width, height / actualSize.height) || 1;\n\n    const scaledSize = {\n      width: actualSize.width * scale,\n      height: actualSize.height * scale,\n    };\n\n    // Clip the image to rectangle (sx, sy, sw, sh).\n    const sw = Math.round(actualSize.width);\n    const sh = Math.round(actualSize.height);\n\n    // Scale the image to dimensions (dw, dh).\n    const dw = Math.round(scaledSize.width);\n    const dh = Math.round(scaledSize.height);\n\n    // Draw the image on the canvas at coordinates (dx, dy).\n    const dx = Math.round((width - scaledSize.width) / 2 + x);\n    const dy = Math.round((height - scaledSize.height) / 2 + y);\n\n    canvas.context.drawImage(image, 0, 0, sw, sh, dx, dy, dw, dh);\n  } else {\n    const scale = Math.max(width / actualSize.width, height / actualSize.height) || 1;\n\n    const scaledSize = {\n      width: actualSize.width * scale,\n      height: actualSize.height * scale,\n    };\n\n    // Clip the image to rectangle (sx, sy, sw, sh).\n    const sx = Math.round(clamp(width * 0.5 - focusPoint.x * scale, width - scaledSize.width, 0)) * (-1 / scale);\n    const sy = Math.round(clamp(height * 0.5 - focusPoint.y * scale, height - scaledSize.height, 0)) * (-1 / scale);\n    const sw = Math.round(actualSize.width - sx * 2);\n    const sh = Math.round(actualSize.height - sy * 2);\n\n    // Scale the image to dimensions (dw, dh).\n    const dw = Math.round(width);\n    const dh = Math.round(height);\n\n    // Draw the image on the canvas at coordinates (dx, dy).\n    const dx = Math.round(x);\n    const dy = Math.round(y);\n\n    canvas.context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n  }\n  if (hasClip) {\n    canvas.context.restore();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}