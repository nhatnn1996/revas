{"ast":null,"code":"import _classCallCheck from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// import { updateLayout } from './css-layout'\nimport { updateLayout } from \"./yoga-layout\";\nimport { promise } from \"./yoga-layout/init\";\nimport { drawNode } from \"./draw\";\nimport { getNodeByTouch, emitTouch } from \"./touch\";\nexport var Container = /*#__PURE__*/function () {\n  _createClass(Container, [{\n    key: \"canvas\",\n    get: function get() {\n      var _this$_root;\n\n      return (_this$_root = this._root) === null || _this$_root === void 0 ? void 0 : _this$_root.props.canvas;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      var _this$_root2;\n\n      return ((_this$_root2 = this._root) === null || _this$_root2 === void 0 ? void 0 : _this$_root2.props.clientWidth) || 0;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      var _this$_root3;\n\n      return ((_this$_root3 = this._root) === null || _this$_root3 === void 0 ? void 0 : _this$_root3.props.clientHeight) || 0;\n    }\n  }, {\n    key: \"scale\",\n    get: function get() {\n      var _this$_root4;\n\n      return ((_this$_root4 = this._root) === null || _this$_root4 === void 0 ? void 0 : _this$_root4.props.deviceRatio) || 1;\n    }\n  }]);\n\n  function Container() {\n    var _this = this;\n\n    _classCallCheck(this, Container);\n\n    this._ready = false;\n    this._next = false;\n    this._reflow = false;\n    this._root = void 0;\n\n    this.handleTouch = function (evt) {\n      var _root = _this._root;\n\n      if (_root) {\n        var emitted = new WeakSet();\n        Object.values(evt.touches).forEach(function (touch) {\n          var node = getNodeByTouch(_root, evt.type, touch); // check if node is unmounted\n\n          if (node.parent && !emitted.has(node)) {\n            emitted.add(node);\n            emitTouch(node, evt);\n          }\n        });\n      }\n    };\n\n    this.draw = function () {\n      var reflow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      _this._reflow = _this._reflow || reflow;\n\n      if (!_this._ready) {\n        _this._next = true;\n        return;\n      }\n\n      _this._ready = false;\n      var _root = _this._root,\n          canvas = _this.canvas;\n\n      if (canvas) {\n        // if not unmounted\n        if (_this._reflow) {\n          updateLayout(_root)();\n          _this._reflow = false;\n        }\n\n        canvas.context.clearRect(0, 0, _this.width, _this.height);\n        drawNode(canvas, _root, _this);\n        requestAnimationFrame(_this.ready);\n      }\n    };\n\n    this.ready = function () {\n      _this._ready = true;\n\n      if (_this._next) {\n        _this._next = false;\n\n        _this.draw();\n      }\n    };\n\n    promise.then(this.ready);\n  }\n\n  _createClass(Container, [{\n    key: \"setRoot\",\n    value: function setRoot(root) {\n      this._root = root;\n    }\n  }]);\n\n  return Container;\n}();","map":{"version":3,"sources":["/Users/fimplus/Desktop/revasReal/src/revas/core/Container.ts"],"names":["updateLayout","promise","drawNode","getNodeByTouch","emitTouch","Container","_root","props","canvas","clientWidth","clientHeight","deviceRatio","_ready","_next","_reflow","handleTouch","evt","emitted","WeakSet","Object","values","touches","forEach","touch","node","type","parent","has","add","draw","reflow","context","clearRect","width","height","requestAnimationFrame","ready","then","root"],"mappings":"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","sourcesContent":["import { Node, RevasTouchEvent } from \"./Node\";\n// import { updateLayout } from './css-layout'\nimport { updateLayout } from \"./yoga-layout\";\nimport { promise } from \"./yoga-layout/init\";\nimport { drawNode } from \"./draw\";\nimport { getNodeByTouch, emitTouch } from \"./touch\";\nimport { RevasCanvas } from \"./Canvas\";\nimport { AppContextType } from \"../components/Context\";\n\nexport class Container {\n  private _ready = false;\n  private _next = false;\n  private _reflow = false;\n  private _root?: Node<AppContextType>;\n\n  get canvas(): RevasCanvas | void {\n    return this._root?.props.canvas;\n  }\n\n  get width() {\n    return this._root?.props.clientWidth || 0;\n  }\n\n  get height() {\n    return this._root?.props.clientHeight || 0;\n  }\n\n  get scale() {\n    return this._root?.props.deviceRatio || 1;\n  }\n\n  constructor() {\n    promise.then(this.ready);\n  }\n\n  public setRoot(root?: Node<AppContextType>) {\n    this._root = root;\n  }\n\n  public handleTouch = (evt: RevasTouchEvent) => {\n    const { _root } = this;\n    if (_root) {\n      const emitted = new WeakSet<Node>();\n      Object.values(evt.touches).forEach((touch) => {\n        const node = getNodeByTouch(_root, evt.type, touch);\n        // check if node is unmounted\n        if (node.parent && !emitted.has(node)) {\n          emitted.add(node);\n          emitTouch(node, evt);\n        }\n      });\n    }\n  };\n\n  public draw = (reflow = false) => {\n    this._reflow = this._reflow || reflow;\n    if (!this._ready) {\n      this._next = true;\n      return;\n    }\n    this._ready = false;\n    const { _root, canvas } = this;\n    if (canvas) {\n      // if not unmounted\n      if (this._reflow) {\n        updateLayout(_root!)();\n        this._reflow = false;\n      }\n      canvas.context.clearRect(0, 0, this.width, this.height);\n      drawNode(canvas, _root!, this);\n      requestAnimationFrame(this.ready);\n    }\n  };\n\n  private ready = () => {\n    this._ready = true;\n    if (this._next) {\n      this._next = false;\n      this.draw();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}