{"ast":null,"code":"import { adapter } from './utils';\nvar MAX_SIZE = 30;\nvar cache = new Map();\nvar ids = [];\nexport function getCache(id) {\n  return cache.get(id);\n}\nexport function createCache(style, w, h, id) {\n  if (ids.length >= MAX_SIZE) {\n    var expiredId = ids.shift();\n\n    var _ref = cache.get(expiredId),\n        canvas = _ref.canvas;\n\n    var cached = {\n      canvas: adapter.resetOffscreenCanvas(canvas, w, h),\n      id: id,\n      style: style\n    };\n    cache.delete(expiredId);\n    cache.set(cached.id, cached);\n    ids.push(cached.id);\n    return cached;\n  } else {\n    var _cached = {\n      canvas: adapter.createOffscreenCanvas(w, h),\n      id: id,\n      style: style\n    };\n    cache.set(_cached.id, _cached);\n    ids.push(_cached.id);\n    return _cached;\n  }\n}\nvar idCache = new WeakMap();\nvar __ID = 0;\nexport function autoCacheId(node) {\n  if (idCache.has(node)) {\n    return idCache.get(node);\n  } else {\n    var id = \"$$auto_id-\".concat(__ID++);\n    idCache.set(node, id);\n    return id;\n  }\n}\nexport function clearCache() {\n  cache.clear();\n  ids.length = 0;\n}","map":{"version":3,"sources":["/Users/fimplus/Desktop/revasReal/src/revas/core/offscreen.ts"],"names":["adapter","MAX_SIZE","cache","Map","ids","getCache","id","get","createCache","style","w","h","length","expiredId","shift","canvas","cached","resetOffscreenCanvas","delete","set","push","createOffscreenCanvas","idCache","WeakMap","__ID","autoCacheId","node","has","clearCache","clear"],"mappings":"AAAA,SAASA,OAAT,QAAwB,SAAxB;AAUA,IAAMC,QAAQ,GAAG,EAAjB;AAEA,IAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,IAAMC,GAAa,GAAG,EAAtB;AAEA,OAAO,SAASC,QAAT,CAAkBC,EAAlB,EAA8B;AACnC,SAAOJ,KAAK,CAACK,GAAN,CAAUD,EAAV,CAAP;AACD;AAED,OAAO,SAASE,WAAT,CAAqBC,KAArB,EAAiCC,CAAjC,EAA4CC,CAA5C,EAAuDL,EAAvD,EAAiF;AACtF,MAAIF,GAAG,CAACQ,MAAJ,IAAcX,QAAlB,EAA4B;AAC1B,QAAMY,SAAS,GAAGT,GAAG,CAACU,KAAJ,EAAlB;;AAD0B,eAEPZ,KAAK,CAACK,GAAN,CAAUM,SAAV,CAFO;AAAA,QAElBE,MAFkB,QAElBA,MAFkB;;AAG1B,QAAMC,MAAoB,GAAG;AAC3BD,MAAAA,MAAM,EAAEf,OAAO,CAACiB,oBAAR,CAA8BF,MAA9B,EAAsCL,CAAtC,EAAyCC,CAAzC,CADmB;AAE3BL,MAAAA,EAAE,EAAFA,EAF2B;AAG3BG,MAAAA,KAAK,EAALA;AAH2B,KAA7B;AAKAP,IAAAA,KAAK,CAACgB,MAAN,CAAaL,SAAb;AACAX,IAAAA,KAAK,CAACiB,GAAN,CAAUH,MAAM,CAACV,EAAjB,EAAqBU,MAArB;AACAZ,IAAAA,GAAG,CAACgB,IAAJ,CAASJ,MAAM,CAACV,EAAhB;AACA,WAAOU,MAAP;AACD,GAZD,MAYO;AACL,QAAMA,OAAoB,GAAG;AAC3BD,MAAAA,MAAM,EAAEf,OAAO,CAACqB,qBAAR,CAA+BX,CAA/B,EAAkCC,CAAlC,CADmB;AAE3BL,MAAAA,EAAE,EAAFA,EAF2B;AAG3BG,MAAAA,KAAK,EAALA;AAH2B,KAA7B;AAKAP,IAAAA,KAAK,CAACiB,GAAN,CAAUH,OAAM,CAACV,EAAjB,EAAqBU,OAArB;AACAZ,IAAAA,GAAG,CAACgB,IAAJ,CAASJ,OAAM,CAACV,EAAhB;AACA,WAAOU,OAAP;AACD;AACF;AAED,IAAMM,OAAO,GAAG,IAAIC,OAAJ,EAAhB;AACA,IAAIC,IAAI,GAAG,CAAX;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAAiC;AACtC,MAAIJ,OAAO,CAACK,GAAR,CAAYD,IAAZ,CAAJ,EAAuB;AACrB,WAAOJ,OAAO,CAACf,GAAR,CAAYmB,IAAZ,CAAP;AACD,GAFD,MAEO;AACL,QAAMpB,EAAE,uBAAgBkB,IAAI,EAApB,CAAR;AACAF,IAAAA,OAAO,CAACH,GAAR,CAAYO,IAAZ,EAAkBpB,EAAlB;AACA,WAAOA,EAAP;AACD;AACF;AAED,OAAO,SAASsB,UAAT,GAAsB;AAC3B1B,EAAAA,KAAK,CAAC2B,KAAN;AACAzB,EAAAA,GAAG,CAACQ,MAAJ,GAAa,CAAb;AACD","sourcesContent":["import { adapter } from './utils';\nimport { Node } from './Node';\nimport { RevasCanvas } from './Canvas';\n\nexport interface CachedCanvas {\n  id: string;\n  canvas: RevasCanvas;\n  style: any;\n}\n\nconst MAX_SIZE = 30;\n\nconst cache = new Map<string, CachedCanvas>();\nconst ids: string[] = [];\n\nexport function getCache(id: string) {\n  return cache.get(id);\n}\n\nexport function createCache(style: any, w: number, h: number, id: string): CachedCanvas {\n  if (ids.length >= MAX_SIZE) {\n    const expiredId = ids.shift()!;\n    const { canvas } = cache.get(expiredId)!;\n    const cached: CachedCanvas = {\n      canvas: adapter.resetOffscreenCanvas!(canvas, w, h),\n      id,\n      style,\n    };\n    cache.delete(expiredId);\n    cache.set(cached.id, cached);\n    ids.push(cached.id);\n    return cached;\n  } else {\n    const cached: CachedCanvas = {\n      canvas: adapter.createOffscreenCanvas!(w, h),\n      id,\n      style,\n    };\n    cache.set(cached.id, cached);\n    ids.push(cached.id);\n    return cached;\n  }\n}\n\nconst idCache = new WeakMap<Node, string>();\nlet __ID = 0;\n\nexport function autoCacheId(node: Node) {\n  if (idCache.has(node)) {\n    return idCache.get(node);\n  } else {\n    const id = `$$auto_id-${__ID++}`;\n    idCache.set(node, id);\n    return id;\n  }\n}\n\nexport function clearCache() {\n  cache.clear();\n  ids.length = 0;\n}\n"]},"metadata":{},"sourceType":"module"}