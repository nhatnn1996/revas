{"ast":null,"code":"import _classCallCheck from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var RevasCanvas = /*#__PURE__*/function () {\n  function RevasCanvas(context) {\n    _classCallCheck(this, RevasCanvas);\n\n    this.transform = void 0;\n    this.transform = new Transform(context);\n  }\n\n  _createClass(RevasCanvas, [{\n    key: \"context\",\n    get: function get() {\n      return this.transform.context;\n    }\n  }, {\n    key: \"element\",\n    get: function get() {\n      return this.context.canvas;\n    }\n  }]);\n\n  return RevasCanvas;\n}();\nexport var Transform = /*#__PURE__*/function () {\n  function Transform(context) {\n    _classCallCheck(this, Transform);\n\n    this.context = context;\n    this._stack = [];\n    this._canGetTransform = false;\n    this._canGetTransform = Boolean(context.getTransform);\n  }\n\n  _createClass(Transform, [{\n    key: \"save\",\n    value: function save() {\n      if (this._canGetTransform) {\n        this._stack.push(this.context.getTransform());\n      } else {\n        this.context.save();\n      }\n    }\n  }, {\n    key: \"restore\",\n    value: function restore() {\n      if (this._canGetTransform) {\n        if (this._stack.length > 0) {\n          this.context.setTransform(this._stack.pop());\n        }\n      } else {\n        this.context.restore();\n      }\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(x, y) {\n      this.context.translate(x, y);\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(rad) {\n      this.context.rotate(rad);\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(sx, sy) {\n      this.context.scale(sx, sy);\n    }\n  }]);\n\n  return Transform;\n}();","map":{"version":3,"sources":["/Users/fimplus/Desktop/revasReal/src/revas/core/Canvas.ts"],"names":["RevasCanvas","context","transform","Transform","canvas","_stack","_canGetTransform","Boolean","getTransform","push","save","length","setTransform","pop","restore","x","y","translate","rad","rotate","sx","sy","scale"],"mappings":";;AAAA,WAAaA,WAAb;AAEE,uBAAYC,OAAZ,EAA+C;AAAA;;AAAA,SAD/BC,SAC+B;AAC7C,SAAKA,SAAL,GAAiB,IAAIC,SAAJ,CAAcF,OAAd,CAAjB;AACD;;AAJH;AAAA;AAAA,wBAMgB;AACZ,aAAO,KAAKC,SAAL,CAAeD,OAAtB;AACD;AARH;AAAA;AAAA,wBAUgB;AACZ,aAAO,KAAKA,OAAL,CAAaG,MAApB;AACD;AAZH;;AAAA;AAAA;AAeA,WAAaD,SAAb;AAKE,qBAA4BF,OAA5B,EAA+D;AAAA;;AAAA,SAAnCA,OAAmC,GAAnCA,OAAmC;AAAA,SAJ/DI,MAI+D,GAJzC,EAIyC;AAAA,SAF/DC,gBAE+D,GAF5C,KAE4C;AAC7D,SAAKA,gBAAL,GAAwBC,OAAO,CAACN,OAAO,CAACO,YAAT,CAA/B;AACD;;AAPH;AAAA;AAAA,2BASS;AACL,UAAI,KAAKF,gBAAT,EAA2B;AACzB,aAAKD,MAAL,CAAYI,IAAZ,CAAiB,KAAKR,OAAL,CAAaO,YAAb,EAAjB;AACD,OAFD,MAEO;AACL,aAAKP,OAAL,CAAaS,IAAb;AACD;AACF;AAfH;AAAA;AAAA,8BAiBY;AACR,UAAI,KAAKJ,gBAAT,EAA2B;AACzB,YAAI,KAAKD,MAAL,CAAYM,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,eAAKV,OAAL,CAAaW,YAAb,CAA0B,KAAKP,MAAL,CAAYQ,GAAZ,EAA1B;AACD;AACF,OAJD,MAIO;AACL,aAAKZ,OAAL,CAAaa,OAAb;AACD;AACF;AAzBH;AAAA;AAAA,8BA2BYC,CA3BZ,EA2BuBC,CA3BvB,EA2BkC;AAC9B,WAAKf,OAAL,CAAagB,SAAb,CAAuBF,CAAvB,EAA0BC,CAA1B;AACD;AA7BH;AAAA;AAAA,2BA+BSE,GA/BT,EA+BsB;AAClB,WAAKjB,OAAL,CAAakB,MAAb,CAAoBD,GAApB;AACD;AAjCH;AAAA;AAAA,0BAmCQE,EAnCR,EAmCoBC,EAnCpB,EAmCgC;AAC5B,WAAKpB,OAAL,CAAaqB,KAAb,CAAmBF,EAAnB,EAAuBC,EAAvB;AACD;AArCH;;AAAA;AAAA","sourcesContent":["export class RevasCanvas {\n  public readonly transform: Transform;\n  constructor(context: CanvasRenderingContext2D) {\n    this.transform = new Transform(context);\n  }\n\n  get context() {\n    return this.transform.context;\n  }\n\n  get element() {\n    return this.context.canvas;\n  }\n}\n\nexport class Transform {\n  _stack: DOMMatrix[] = [];\n\n  _canGetTransform = false;\n\n  constructor(public readonly context: CanvasRenderingContext2D) {\n    this._canGetTransform = Boolean(context.getTransform);\n  }\n\n  save() {\n    if (this._canGetTransform) {\n      this._stack.push(this.context.getTransform());\n    } else {\n      this.context.save();\n    }\n  }\n\n  restore() {\n    if (this._canGetTransform) {\n      if (this._stack.length > 0) {\n        this.context.setTransform(this._stack.pop());\n      }\n    } else {\n      this.context.restore();\n    }\n  }\n\n  translate(x: number, y: number) {\n    this.context.translate(x, y);\n  }\n\n  rotate(rad: number) {\n    this.context.rotate(rad);\n  }\n\n  scale(sx: number, sy: number) {\n    this.context.scale(sx, sy);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}