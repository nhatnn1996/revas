{"ast":null,"code":"import _toConsumableArray from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\nimport { drawText, measureText, applyTextStyle, DEFAULT_MEASURE } from './common/drawText';\nimport { getFrameFromNode, flatten, applyAnimated } from '../core/utils';\n\nvar Text = /*#__PURE__*/function (_React$Component) {\n  _inherits(Text, _React$Component);\n\n  var _super = _createSuper(Text);\n\n  function Text() {\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      height: 0\n    };\n    _this._measured = DEFAULT_MEASURE;\n    _this._drawed = void 0;\n\n    _this.drawText = function (canvas, node) {\n      var content = getTextFromNode(node);\n\n      if (content) {\n        var options = {\n          numberOfLines: node.props.numberOfLines || 0,\n          textStyle: getTextStyleFromNode(node),\n          frame: getFrameFromNode(node),\n          content: content\n        };\n        applyTextStyle(canvas, options);\n\n        if (textPropsChanged(options, _this._drawed)) {\n          _this._measured = measureText(canvas, options);\n          _this._drawed = options;\n        }\n\n        var _this$_measured = _slicedToArray(_this._measured, 2),\n            lines = _this$_measured[0],\n            height = _this$_measured[1];\n\n        if (height !== _this.state.height) {\n          _this.setState({\n            height: height\n          });\n        } else {\n          drawText(canvas, options, lines);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Text, [{\n    key: \"render\",\n    value: function render() {\n      var _ref = this.props,\n          children = _ref.children,\n          numberOfLines = _ref.numberOfLines,\n          others = _objectWithoutProperties(_ref, [\"children\", \"numberOfLines\"]);\n\n      return React.createElement('View', others, React.createElement('Text', {\n        content: children,\n        customDrawer: this.drawText,\n        textStyle: others.style,\n        style: this.state,\n        numberOfLines: numberOfLines,\n        $ready: Boolean(this._drawed)\n      }));\n    }\n  }]);\n\n  return Text;\n}(React.Component);\n\nexport { Text as default };\nvar TEXT_STYLES_LIST = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'textBaseline', 'wordBreak', 'lineHeight'];\nvar DEFAULT_TEXTSTYLE = {\n  fontFamily: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue'\",\n  fontWeight: 'normal',\n  fontSize: 14,\n  color: '#000',\n  fontStyle: 'normal',\n  textBaseline: 'middle'\n};\n\nfunction textStyleChanged(left, right) {\n  for (var i = 0; i < TEXT_STYLES_LIST.length; i++) {\n    var item = TEXT_STYLES_LIST[i];\n\n    if (left[item] !== right[item]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction textPropsChanged(left, right) {\n  if (!right) {\n    return true;\n  }\n\n  if (left.content !== right.content) {\n    return true;\n  }\n\n  if (left.numberOfLines !== right.numberOfLines) {\n    return true;\n  }\n\n  if (left.frame.width !== right.frame.width) {\n    return true;\n  }\n\n  return textStyleChanged(left.textStyle, right.textStyle);\n}\n\nfunction getTextFromNode(node) {\n  var frame = getFrameFromNode(node);\n\n  if (frame.width > 0) {\n    var content = node.props.content;\n\n    if (typeof content === 'string') {\n      return content;\n    } else if (Array.isArray(content)) {\n      return content.join('');\n    }\n  }\n\n  return '';\n}\n\nfunction getTextStyleFromNode(node) {\n  var style = Object.assign.apply(Object, [{}, DEFAULT_TEXTSTYLE].concat(_toConsumableArray(flatten([node.props.textStyle]))));\n  style.lineHeight = style.lineHeight || style.fontSize * 1.1;\n  return applyAnimated(style);\n} // TODO: nested text support","map":{"version":3,"sources":["/Users/fimplus/Desktop/revasReal/src/revas/components/Text.ts"],"names":["React","drawText","measureText","applyTextStyle","DEFAULT_MEASURE","getFrameFromNode","flatten","applyAnimated","Text","state","height","_measured","_drawed","canvas","node","content","getTextFromNode","options","numberOfLines","props","textStyle","getTextStyleFromNode","frame","textPropsChanged","lines","setState","children","others","createElement","customDrawer","style","$ready","Boolean","Component","TEXT_STYLES_LIST","DEFAULT_TEXTSTYLE","fontFamily","fontWeight","fontSize","color","fontStyle","textBaseline","textStyleChanged","left","right","i","length","item","width","Array","isArray","join","Object","assign","lineHeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { drawText, measureText, applyTextStyle, DrawTextOptions, DEFAULT_MEASURE } from './common/drawText';\nimport { NodeProps, Node } from '../core/Node';\nimport { getFrameFromNode, flatten, applyAnimated } from '../core/utils';\nimport { RevasCanvas } from '../core/Canvas';\n\nexport type TextProps = {\n  numberOfLines?: number;\n} & NodeProps;\n\nexport default class Text extends React.Component<TextProps> {\n  state = { height: 0 };\n\n  _measured = DEFAULT_MEASURE;\n\n  _drawed?: DrawTextOptions;\n\n  drawText = (canvas: RevasCanvas, node: Node) => {\n    const content = getTextFromNode(node);\n    if (content) {\n      const options = {\n        numberOfLines: node.props.numberOfLines || 0,\n        textStyle: getTextStyleFromNode(node),\n        frame: getFrameFromNode(node),\n        content,\n      };\n      applyTextStyle(canvas, options);\n      if (textPropsChanged(options, this._drawed)) {\n        this._measured = measureText(canvas, options);\n        this._drawed = options;\n      }\n      const [lines, height] = this._measured;\n      if (height !== this.state.height) {\n        this.setState({ height });\n      } else {\n        drawText(canvas, options, lines);\n      }\n    }\n  };\n  render() {\n    const { children, numberOfLines, ...others } = this.props as any;\n    return React.createElement(\n      'View',\n      others,\n      React.createElement('Text', {\n        content: children,\n        customDrawer: this.drawText,\n        textStyle: others.style,\n        style: this.state,\n        numberOfLines,\n        $ready: Boolean(this._drawed),\n      })\n    );\n  }\n}\n\nconst TEXT_STYLES_LIST = [\n  'fontStyle',\n  'fontWeight',\n  'fontSize',\n  'fontFamily',\n  'textBaseline',\n  'wordBreak',\n  'lineHeight',\n];\n\nconst DEFAULT_TEXTSTYLE = {\n  fontFamily:\n    \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue'\",\n  fontWeight: 'normal',\n  fontSize: 14,\n  color: '#000',\n  fontStyle: 'normal',\n  textBaseline: 'middle',\n};\n\nfunction textStyleChanged(left: any, right: any) {\n  for (let i = 0; i < TEXT_STYLES_LIST.length; i++) {\n    const item = TEXT_STYLES_LIST[i];\n    if (left[item] !== right[item]) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction textPropsChanged(left: DrawTextOptions, right?: DrawTextOptions) {\n  if (!right) {\n    return true;\n  }\n  if (left.content !== right.content) {\n    return true;\n  }\n  if (left.numberOfLines !== right.numberOfLines) {\n    return true;\n  }\n  if (left.frame.width !== right.frame.width) {\n    return true;\n  }\n  return textStyleChanged(left.textStyle, right.textStyle);\n}\n\nfunction getTextFromNode(node: Node) {\n  const frame = getFrameFromNode(node);\n  if (frame.width > 0) {\n    const { content } = node.props;\n    if (typeof content === 'string') {\n      return content;\n    } else if (Array.isArray(content)) {\n      return content.join('');\n    }\n  }\n  return '';\n}\n\nfunction getTextStyleFromNode(node: Node) {\n  const style = Object.assign({}, DEFAULT_TEXTSTYLE, ...flatten([node.props.textStyle]));\n  style.lineHeight = style.lineHeight || style.fontSize * 1.1;\n  return applyAnimated(style);\n}\n// TODO: nested text support\n"]},"metadata":{},"sourceType":"module"}