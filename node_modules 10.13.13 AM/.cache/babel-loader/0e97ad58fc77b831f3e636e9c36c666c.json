{"ast":null,"code":"import _slicedToArray from \"/Users/fimplus/Desktop/revasReal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { yoga as Yoga } from './init';\nimport { Frame } from '../Node';\nimport apply from './style';\n\nfunction _updateLayout(node) {\n  var yoga = Yoga.Node.create();\n  var children = [];\n  apply(yoga, node.props.style);\n\n  for (var i = 0; i < node.children.length; i++) {\n    var child = node.children[i];\n\n    var _updateLayout2 = _updateLayout(child),\n        _updateLayout3 = _slicedToArray(_updateLayout2, 2),\n        f = _updateLayout3[0],\n        y = _updateLayout3[1];\n\n    var index = children.push(f);\n    yoga.insertChild(y, index - 1);\n  }\n\n  function process() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    var _yoga$getComputedLayo = yoga.getComputedLayout(),\n        left = _yoga$getComputedLayo.left,\n        top = _yoga$getComputedLayo.top,\n        width = _yoga$getComputedLayo.width,\n        height = _yoga$getComputedLayo.height;\n\n    node.frame = new Frame(x + left, y + top, width, height);\n    node.props.onLayout && node.props.onLayout(node.frame);\n\n    for (var _i = 0; _i < children.length; _i++) {\n      children[_i](node.frame.x, node.frame.y);\n    }\n\n    yoga.free();\n  }\n\n  return [process, yoga];\n}\n\nexport function updateLayout(root) {\n  var _updateLayout4 = _updateLayout(root),\n      _updateLayout5 = _slicedToArray(_updateLayout4, 2),\n      process = _updateLayout5[0],\n      yoga = _updateLayout5[1];\n\n  var _root$props = root.props,\n      clientWidth = _root$props.clientWidth,\n      clientHeight = _root$props.clientHeight,\n      RTL = _root$props.RTL;\n  yoga.calculateLayout(clientWidth, clientHeight, RTL ? Yoga.DIRECTION_RTL : Yoga.DIRECTION_LTR);\n  return process;\n}","map":{"version":3,"sources":["/Users/fimplus/Desktop/revasReal/src/revas/core/yoga-layout/index.ts"],"names":["yoga","Yoga","Frame","apply","_updateLayout","node","Node","create","children","props","style","i","length","child","f","y","index","push","insertChild","process","x","getComputedLayout","left","top","width","height","frame","onLayout","free","updateLayout","root","clientWidth","clientHeight","RTL","calculateLayout","DIRECTION_RTL","DIRECTION_LTR"],"mappings":";AACA,SAASA,IAAI,IAAIC,IAAjB,QAA6B,QAA7B;AACA,SAAeC,KAAf,QAA4B,SAA5B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAGA,SAASC,aAAT,CAAuBC,IAAvB,EAAyD;AACvD,MAAML,IAAI,GAAGC,IAAI,CAACK,IAAL,CAAUC,MAAV,EAAb;AACA,MAAMC,QAAoB,GAAG,EAA7B;AACAL,EAAAA,KAAK,CAACH,IAAD,EAAOK,IAAI,CAACI,KAAL,CAAWC,KAAlB,CAAL;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACG,QAAL,CAAcI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,QAAME,KAAK,GAAGR,IAAI,CAACG,QAAL,CAAcG,CAAd,CAAd;;AAD6C,yBAE9BP,aAAa,CAACS,KAAD,CAFiB;AAAA;AAAA,QAEtCC,CAFsC;AAAA,QAEnCC,CAFmC;;AAG7C,QAAMC,KAAK,GAAGR,QAAQ,CAACS,IAAT,CAAcH,CAAd,CAAd;AACAd,IAAAA,IAAI,CAACkB,WAAL,CAAiBH,CAAjB,EAAoBC,KAAK,GAAG,CAA5B;AACD;;AACD,WAASG,OAAT,GAA+B;AAAA,QAAdC,CAAc,uEAAV,CAAU;AAAA,QAAPL,CAAO,uEAAH,CAAG;;AAAA,gCACQf,IAAI,CAACqB,iBAAL,EADR;AAAA,QACrBC,IADqB,yBACrBA,IADqB;AAAA,QACfC,GADe,yBACfA,GADe;AAAA,QACVC,KADU,yBACVA,KADU;AAAA,QACHC,MADG,yBACHA,MADG;;AAE7BpB,IAAAA,IAAI,CAACqB,KAAL,GAAa,IAAIxB,KAAJ,CAAUkB,CAAC,GAAGE,IAAd,EAAoBP,CAAC,GAAGQ,GAAxB,EAA6BC,KAA7B,EAAoCC,MAApC,CAAb;AACApB,IAAAA,IAAI,CAACI,KAAL,CAAWkB,QAAX,IAAuBtB,IAAI,CAACI,KAAL,CAAWkB,QAAX,CAAoBtB,IAAI,CAACqB,KAAzB,CAAvB;;AACA,SAAK,IAAIf,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,EAAC,EAAtC,EAA0C;AACxCH,MAAAA,QAAQ,CAACG,EAAD,CAAR,CAAYN,IAAI,CAACqB,KAAL,CAAWN,CAAvB,EAA0Bf,IAAI,CAACqB,KAAL,CAAWX,CAArC;AACD;;AACDf,IAAAA,IAAI,CAAC4B,IAAL;AACD;;AACD,SAAO,CAACT,OAAD,EAAUnB,IAAV,CAAP;AACD;;AAED,OAAO,SAAS6B,YAAT,CAAsBC,IAAtB,EAAkD;AAAA,uBAC/B1B,aAAa,CAAC0B,IAAD,CADkB;AAAA;AAAA,MAChDX,OADgD;AAAA,MACvCnB,IADuC;;AAAA,oBAEZ8B,IAAI,CAACrB,KAFO;AAAA,MAE/CsB,WAF+C,eAE/CA,WAF+C;AAAA,MAElCC,YAFkC,eAElCA,YAFkC;AAAA,MAEpBC,GAFoB,eAEpBA,GAFoB;AAGvDjC,EAAAA,IAAI,CAACkC,eAAL,CAAqBH,WAArB,EAAkCC,YAAlC,EAAgDC,GAAG,GAAGhC,IAAI,CAACkC,aAAR,GAAwBlC,IAAI,CAACmC,aAAhF;AACA,SAAOjB,OAAP;AACD","sourcesContent":["import type { YogaNode } from 'yoga-layout-wasm/asm';\nimport { yoga as Yoga } from './init';\nimport { Node, Frame } from '../Node';\nimport apply from './style';\nimport { AppContextType } from '../../components/Context';\n\nfunction _updateLayout(node: Node): [Function, YogaNode] {\n  const yoga = Yoga.Node.create();\n  const children: Function[] = [];\n  apply(yoga, node.props.style);\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n    const [f, y] = _updateLayout(child);\n    const index = children.push(f);\n    yoga.insertChild(y, index - 1);\n  }\n  function process(x = 0, y = 0) {\n    const { left, top, width, height } = yoga.getComputedLayout();\n    node.frame = new Frame(x + left, y + top, width, height);\n    node.props.onLayout && node.props.onLayout(node.frame);\n    for (let i = 0; i < children.length; i++) {\n      children[i](node.frame.x, node.frame.y);\n    }\n    yoga.free();\n  }\n  return [process, yoga];\n}\n\nexport function updateLayout(root: Node<AppContextType>) {\n  const [process, yoga] = _updateLayout(root);\n  const { clientWidth, clientHeight, RTL } = root.props;\n  yoga.calculateLayout(clientWidth, clientHeight, RTL ? Yoga.DIRECTION_RTL : Yoga.DIRECTION_LTR);\n  return process;\n}\n"]},"metadata":{},"sourceType":"module"}