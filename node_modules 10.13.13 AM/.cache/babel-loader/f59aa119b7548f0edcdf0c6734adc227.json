{"ast":null,"code":"import ReactReconciler from 'react-reconciler';\nimport { Node } from './Node';\nimport { noop, now } from './utils';\n\nfunction checkAndRemove(parent, child) {\n  var index = parent.children.indexOf(child);\n\n  if (index >= 0) {\n    parent.children.splice(index, 1);\n  }\n}\n\nfunction appendChild(parent, child) {\n  checkAndRemove(parent, child);\n  parent.children.push(child);\n  child.parent = parent;\n}\n\nexport default ReactReconciler({\n  supportsHydration: false,\n  supportsPersistence: false,\n  supportsMutation: true,\n  isPrimaryRenderer: false,\n  createInstance: function createInstance(type, props) {\n    return new Node(type, props);\n  },\n  createTextInstance: function createTextInstance() {\n    throw new Error('Revas: string cannot be child out of <Text/>');\n  },\n  appendChild: appendChild,\n  appendInitialChild: appendChild,\n  appendChildToContainer: function appendChildToContainer(container, instance) {\n    if (instance.type !== 'Root') {\n      throw new Error(\"wrong root instance type: \".concat(instance.type));\n    }\n\n    container.setRoot(instance);\n  },\n  removeChild: function removeChild(parent, child) {\n    checkAndRemove(parent, child);\n    child.parent = void 0;\n  },\n  removeChildFromContainer: function removeChildFromContainer(container) {\n    container.setRoot();\n  },\n  insertBefore: function insertBefore(parent, child, before) {\n    checkAndRemove(parent, child);\n    var beforeIndex = parent.children.indexOf(before);\n    parent.children.splice(beforeIndex, 0, child);\n    child.parent = parent;\n  },\n  insertInContainerBefore: function insertInContainerBefore() {\n    throw new Error(\"shouldn't be here: insertInContainerBefore\");\n  },\n  finalizeInitialChildren: function finalizeInitialChildren() {\n    return false;\n  },\n  getPublicInstance: function getPublicInstance(instance) {\n    return instance;\n  },\n  prepareUpdate: function prepareUpdate() {\n    return true;\n  },\n  commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n    instance.props = newProps;\n  },\n  prepareForCommit: noop,\n  resetAfterCommit: function resetAfterCommit(container) {\n    container.draw(true);\n  },\n  resetTextContent: noop,\n  getRootHostContext: function getRootHostContext() {\n    return {};\n  },\n  getChildHostContext: function getChildHostContext(parentHostContext) {\n    return parentHostContext;\n  },\n  shouldSetTextContent: function shouldSetTextContent() {\n    return false;\n  },\n  shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {\n    return false;\n  },\n  scheduleDeferredCallback: noop,\n  cancelDeferredCallback: noop,\n  setTimeout: setTimeout,\n  clearTimeout: clearTimeout,\n  noTimeout: -1,\n  now: now\n});","map":{"version":3,"sources":["/Users/fimplus/Desktop/revasReal/src/revas/core/reconciler.ts"],"names":["ReactReconciler","Node","noop","now","checkAndRemove","parent","child","index","children","indexOf","splice","appendChild","push","supportsHydration","supportsPersistence","supportsMutation","isPrimaryRenderer","createInstance","type","props","createTextInstance","Error","appendInitialChild","appendChildToContainer","container","instance","setRoot","removeChild","removeChildFromContainer","insertBefore","before","beforeIndex","insertInContainerBefore","finalizeInitialChildren","getPublicInstance","prepareUpdate","commitUpdate","updatePayload","oldProps","newProps","prepareForCommit","resetAfterCommit","draw","resetTextContent","getRootHostContext","getChildHostContext","parentHostContext","shouldSetTextContent","shouldDeprioritizeSubtree","scheduleDeferredCallback","cancelDeferredCallback","setTimeout","clearTimeout","noTimeout"],"mappings":"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","sourcesContent":["import ReactReconciler from 'react-reconciler';\nimport { Node } from './Node';\nimport { noop, now } from './utils';\nimport { Container } from './Container';\n\nfunction checkAndRemove(parent: Node, child: Node) {\n  const index = parent.children.indexOf(child);\n  if (index >= 0) {\n    parent.children.splice(index, 1);\n  }\n}\n\nfunction appendChild(parent: Node, child: Node) {\n  checkAndRemove(parent, child);\n  parent.children.push(child);\n  child.parent = parent;\n}\n\nexport default ReactReconciler({\n  supportsHydration: false,\n  supportsPersistence: false,\n  supportsMutation: true,\n  isPrimaryRenderer: false,\n\n  createInstance(type: string, props: any) {\n    return new Node(type, props);\n  },\n\n  createTextInstance() {\n    throw new Error('Revas: string cannot be child out of <Text/>');\n  },\n\n  appendChild,\n  appendInitialChild: appendChild,\n  appendChildToContainer(container: Container, instance) {\n    if (instance.type !== 'Root') {\n      throw new Error(`wrong root instance type: ${instance.type}`);\n    }\n    container.setRoot(instance);\n  },\n\n  removeChild(parent: Node, child: Node) {\n    checkAndRemove(parent, child);\n    child.parent = void 0;\n  },\n  removeChildFromContainer(container) {\n    container.setRoot();\n  },\n\n  insertBefore(parent: Node, child: Node, before: Node) {\n    checkAndRemove(parent, child);\n    const beforeIndex = parent.children.indexOf(before);\n    parent.children.splice(beforeIndex, 0, child);\n    child.parent = parent;\n  },\n  insertInContainerBefore() {\n    throw new Error(\"shouldn't be here: insertInContainerBefore\");\n  },\n\n  finalizeInitialChildren() {\n    return false;\n  },\n\n  getPublicInstance(instance) {\n    return instance;\n  },\n\n  prepareUpdate() {\n    return true;\n  },\n\n  commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n    instance.props = newProps;\n  },\n\n  prepareForCommit: noop,\n\n  resetAfterCommit(container: Container) {\n    container.draw(true);\n  },\n\n  resetTextContent: noop,\n\n  getRootHostContext() {\n    return {};\n  },\n\n  getChildHostContext(parentHostContext: object) {\n    return parentHostContext;\n  },\n\n  shouldSetTextContent() {\n    return false;\n  },\n\n  shouldDeprioritizeSubtree: () => false,\n\n  scheduleDeferredCallback: noop,\n  cancelDeferredCallback: noop,\n  setTimeout,\n  clearTimeout,\n  noTimeout: -1,\n  now,\n});\n"]},"metadata":{},"sourceType":"module"}